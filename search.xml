<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DSP</title>
      <link href="/posts/c4b3cf0.html"/>
      <url>/posts/c4b3cf0.html</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ol><li><p>为什么用数字信号？<br>计算机存储器是一个个孤立单元，长度是有限的，只能处理数字信号</p></li><li><p>数字信号处理系统<br>采样保持器-A/D变换器（采样频率限制）<br>D/A变换器-模拟低通滤波器</p></li><li><p>数字信号处理优点：</p><ul><li>抗干扰</li><li>便于大规模集成</li><li>可靠性强</li><li>精度高，电阻，电容误差10%，再有温度，湿度影响，误差更大</li><li>灵活性强，改系统参数，程序</li><li>严格线性相位（FIR）</li><li>存储信号，用延迟实现非因果</li><li>利用图像相关性，压缩编码</li></ul></li><li><p>缺点：功耗（最主要问题）</p></li><li>开创年代：1965（FFT算法提出），理论更早</li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>考研初试</title>
      <link href="/posts/9076aa2c.html"/>
      <url>/posts/9076aa2c.html</url>
      
        <content type="html"><![CDATA[<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><details class="folding-tag" grey><summary> 详情 </summary>              <div class='content'>                            </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>遇到的一些疑问</title>
      <link href="/posts/af2fc76f.html"/>
      <url>/posts/af2fc76f.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>疑问：傅里叶变换F(f)与F(w)幅度是否发生改变？<br>在网上找了下有关的，感觉有点道理<br><a href="https://blog.csdn.net/Clara_D/article/details/115839633">https://blog.csdn.net/Clara_D/article/details/115839633</a><br><a href="https://zhuanlan.zhihu.com/p/365671296">https://zhuanlan.zhihu.com/p/365671296</a></p><p>这里有点困扰的是<script type="math/tex">2\pi \delta (2\pi f )=\delta (f)</script><br>可以根据定义<script type="math/tex">\int_{0_{-} }^{0_{+  } } \delta (t)dt=1</script><br>横轴压缩，纵轴拉伸，可以看到是相等的<br>所以，姑且认为F(f)与为F(w)幅度乘2Π。。。<br><strong>经过考研的再次学习，以上认知正确</strong></p></li></ol><ol><li>疑问：外部电路接入LC回路的部分电感，流出电流I,探究LC回路中的分流时，总电阻保持不变？<br>猜测：可能是近似，为方便计算</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MPLS笔记</title>
      <link href="/posts/46330d35.html"/>
      <url>/posts/46330d35.html</url>
      
        <content type="html"><![CDATA[<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>RIB:路由表<br>FIB（转发信息库）:是RIB的拷贝<br>LIB（标签信息库）：标签分发协议为路由条目分配标签，形成LIB<br>LFIB(标签转发信息库)：FIB+LIB   （show mpls forwarding-table）<br>LDP:标签分发协议    (show mpls ldp bindings)</p><p>LSR（标签交换路由器）：<br>Edge:边缘</p><p>FEC(转发等价类)：一组被转发的数据报文<br>LSP:标签交换通道（Label Switched Path）</p><p>上游：数据的入方向<br>下游：数据转发的出方向<br>下游主动提供标签（你需要我把数据转发给你，你需要提供标签给我）</p><p> VPNv4：64bit的路由区分器 + 32bit的IP地址 = 96bit的VPNv4地址</p><h2 id="MPLS结构"><a href="#MPLS结构" class="headerlink" title="MPLS结构"></a>MPLS结构</h2><ol><li>体系结构<br>A：IP路由协议建立邻居，交互路由信息，生成IP路由表。<br>B：标签交换协议从IP路由表中获取路由信息。IP路由表中的路由前缀匹配了FEC（转发等价类，Forwarding Equivalence Class），在传统的采用最长匹配算法的IP转发中，到同一条路由的所有报文就是一个FEC。<br>C：IP路由表中激活的最优路由生成IP转发表。<br>D：标签转换协议建立邻居，为FEC分配标签并发布给邻居，同时获取邻居发布的标签，生成标签转发表。</li><li>MPLS网络的基本组成单元是标签交换路由器LSR（Label Switching Router）：<ul><li>位于MPLS域边缘、连接其它网络的LSR称为边沿路由器LER（Label Edge Router），如果一个LSR有一个或多个不运行MPLS的相邻节点，那么该LSR就是LER。</li><li>区域内部的LSR称为核心LSR（Core LSR），如果一个LSR的相邻节点都运行MPLS，则该LSR就是核心LSR。</li></ul></li></ol><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol><li><p>LDP只为IGP路由分配标签</p></li><li><p>LDP的IGP自动配置<br> 只有链路状态型动态路由协议支持<br> IS-IS 或者 OSPF</p></li><li><p>标签的条件性通告（控制标签通告）</p><pre><code> 优点：优化标签，节省设备资源</code></pre></li><li><p>MPLS VPN，专线都属于peer to peer VPN类型，而IPSEC,L2TP,GRE…属于overlay VPN类型</p></li><li><p>MPLS VPN优点：<br> a.不同客户的路由隔离（通过VRF技术）<br> b.相同用户的路由传递（通过MP-BGP+MPLS）<br> c.用户可以用重叠地址</p></li><li><p>Q:本地有意义的VRF隔离路由，那么如何解决跨越设备更新过程中路由隔离问题？<br>   A:通过路由区分器（RD）来扩展用户路由的长度，为其增加前缀，保证唯一性</p></li><li><p>路由区分器（RD:Routing Distinguisher ）<br>作用:使得每个客户的路由全局唯一<br>固定长度：64bit</p></li><li><p>Q：所有客户的路由通过BGP批量更新过来，如何区分哪个路由是哪个客户的呢？（RD仅仅使得路由全局唯一，并不会标识出路由属于哪个客户）</p><ul><li>A:借助BGP的路由操控能力—路由标记RT（扩展团体属性），将具有特殊属性的VPNv4前缀还原成IPv4前缀，<br>RT在vrf中部署，分更新路由Export RTs和接收路由和接收路由Import RTs</li></ul></li><li><p>MPLS路由模型<br>CE设备运行标准IP路由，静态或者动态都可。<br>PE设备拥有客户所有路由，需要为每一个客户提供隔离的路由表(vrf routing)，同时拥有一张全局路由表<br>PE运行骨干网IGP,MP-BGP以及与CE之间的路由（静态or动态）<br>PE设备上路由进入哪个vrf靠内层标签，数据进入哪个vrf靠RT(route targets)<br>P设备只负责VPNv4的数据转发，不参与客户的控制平面（大部分情况）<br>P设备运行IGP</p></li><li><p>MP-BGP更新包含如下元素<br>a.VPNv4 address (RD-IPv4)<br>b.扩展属性（RT:route targets,SOO:放环）<br>c.用于转发VPN包的标签<br>d.其他BGP属性（as path,local preference,MED,standard communtiy）</p></li><li><p>MPLS 的TTL</p></li><li><p>MPLS 的MTU</p><p>背景：三层MTU一般为1500Byte，标签栈需要占用一定的MTU，当一个&gt;1500的报文被边界LSR压入标签，将有可能导致报文被分片<br>解决方案：<br>1.降低CE断出方向流量的MTU    ##需要客户配合，并不现实<br>2.应用path MTU发现            ##路径MTU发现使用的ICMP容易被防火墙、ACL、IDS等安全策略干掉<br>3.Cisco IOS允许比1500大一些的报文，称为小巨人帧</p></li><li><p>MPLS LSP Ping在可以在数据转发层检测故障<br>ping mpls ipv4 10.1.1.1/32 source 10.1.1.4<br>报文协议:mpls-echo<br>udp端口3503，目的地址：127.0.0.0/8范围</p></li><li><p>MPLS的基本配置步骤</p><ul><li>ip cef    #全局开启cef</li><li>mpls ip     #全局</li><li>mpls ip #接口下开启mpls</li><li>mpls ldp route-id</li><li>mpls label protocols  #mpls采用哪种协议，一般是ldp</li><li>ospf的LSP端点的环回口子网掩码        #不是/32会出现标签断裂</li><li>测试LSP</li></ul></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#######################################mpls基础配置####################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip cef                    #配置cisco mpls前提，默认开启</span><br><span class="line"></span><br><span class="line">mpls ip                    #全局开启，默认开启</span><br><span class="line">mpls label protocol ldp   #ldp是默认协议</span><br><span class="line"></span><br><span class="line">mpls ldp router-id loopback 0  &#123;force&#125;    #route-id一般使用环回口    ,force为所设route-id立刻生效</span><br><span class="line"></span><br><span class="line">[config-if]#mpls ip         #在需要接收标签的接口下配置mpls    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##########################################【可选】##################################################</span><br><span class="line"></span><br><span class="line">mpls  label range &lt;16-1048575&gt;    #控制标签范围</span><br><span class="line"></span><br><span class="line">[可用于跨设备建立邻居]</span><br><span class="line">R1[config]#mpls ldp neighbor 33.1.1.1 targeted ldp    #使用单播发送hello</span><br><span class="line">R2[config]#mpls ldp discovery targeted-hello accept    #接收单播hello报文</span><br><span class="line"></span><br><span class="line">mpls ldp neighbor 22.1.1.1 password cisco    &#123;0|7|&#125;    #使用密码建立邻居,基于MD5认证，默认是明文</span><br><span class="line"></span><br><span class="line">[IGP协议下自动开启mpls]</span><br><span class="line">ip ospf 110 area 0</span><br><span class="line">    mpls ldp autoconfig        #所有ospf接口下自动开启mpls</span><br><span class="line"></span><br><span class="line">[具体事例四、场景应用之4.3 控制标签分发]</span><br><span class="line">no mpls ldp advertise-labels        #关闭默认标签通告功能</span><br><span class="line">mpls ldp advertise-labels for a to b   #针对特定的邻居控制标签的通告</span><br><span class="line">                                       #a：需要通告的标签的前缀,a的格式是标准acl</span><br><span class="line">                                       #b：将标签通告给邻居的route-id ,b的格式是标准acl</span><br><span class="line"></span><br><span class="line">no mpls ip propagate-ttl    &#123;forwarded | local&#125;#全局模式下,关闭mpls ttl繁衍</span><br><span class="line">    原理：只针对IP报文TTL拷贝到标签产生时，强制更改标签ttl=255,因此也仅仅在PE设备或者边界LSR上有意义</span><br><span class="line">    forwarded参数    从CE接收到的IP TTL不会拷贝，但是PE本地产生的IP报文则会拷贝到标签</span><br><span class="line">    local参数        本地产生的IP TTL也不会拷贝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##################【show命令】############</span><br><span class="line">show mpls ldp neighbor            #LDP邻居</span><br><span class="line"></span><br><span class="line">show mpls forwarding-table      #LFIB标签转发信息表</span><br><span class="line"></span><br><span class="line">show mpls ip binding            #查找LIB标签信息表，【推荐理由】更直观，拥有in use</span><br><span class="line"></span><br><span class="line">show mpls ldp bindings             #查找LIB标签信息表</span><br><span class="line"></span><br><span class="line">show mpls ldp parameters        #查看ldp的发包参数和状态</span><br><span class="line"></span><br><span class="line">show mpls interfaces        #查看哪些接口启用了mpls</span><br><span class="line"></span><br><span class="line">show mpls interface eth0 detail        #查看指定mpls接口状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##################【ping命令】############</span><br><span class="line">ping mpls ipv4 55.1.1.1/32 source 11.1.1.1    #测试标签通道是否畅通</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>交换技术与通信网</title>
      <link href="/posts/9d6528d2.html"/>
      <url>/posts/9d6528d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li><p>思维导图</p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  grey;">预览  </button><div class="hide-content"><p><img src="https://s2.loli.net/2023/10/22/qdl8CxZNSVPgh3j.png" alt="交换技术与通信网1.png"></p></div></div><p>详情见：<a href="https://www.kdocs.cn/view/l/cll3B8EzhJQq?from=docs">https://www.kdocs.cn/view/l/cll3B8EzhJQq?from=docs</a></p></li></ul><ol><li>数据业务为什么不适合采用电路交换方式<br>数据业务具有突发性，可靠性要求高。电路交换不传信息也占用资源，不适用突发性业务，且电路交换无差错控制，可靠性低。</li><li>网络体系结构：用抽象的方法观察网络内部功能的一种分层化结构</li><li>协议：“水平的”<ul><li>语义：规定通信双方彼此“讲什么”，即确定协议元素的类型，如通信双方要发出什么控制信号，执行的动作和返回的应答</li><li>语法：规定通信双方彼此“如何讲”，即确定协议元素的格式，如数据和控制信息的格式</li><li>定时：规定事件执行的顺序，即确定通信过程中通信状态的变化</li></ul></li><li>服务：“垂直的”，由下层向上层通过层间接口（interface）提供，两个实体在通信协议的控制下，使得N层能够向上一层提供服务</li><li>实体：表示任何可以发送或接收信息的硬件或软件进程</li><li>面向连接和无连接指的都是协议，用来说明如何在物理介质上传输数据</li><li>无连接协议：每个分组的处理都独立于所有其他分组<br>分组被称为数据报（datagram），每个分组都是独立寻址，并由应用程序发送的<br>网络会尽最大努力传送每一个数据报，但并不保证数据报不丢失、不延迟或者不错序传输<ul><li>可以很方便地支持一对多和多对一通信</li><li>是构建面向连接协议的基础</li></ul></li><li>面向连接协议：维护了与后继分组有关的状态信息，使用这种协议的应用程序通常都会进行长期的对话。记住这些状态，协议就可以提供可靠的传输。<br>阶段 ：<ul><li>建立连接</li><li>数据传输</li><li>释放连接</li></ul></li></ol>              </div>            </details><h2 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>                            </div>            </details><h2 id="传送层技术"><a href="#传送层技术" class="headerlink" title="传送层技术"></a>传送层技术</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ol><li>局域网内通过MAC地址通信</li><li>IP地址：为互联网上的每一个网络和每一台主机分配一个逻辑地址</li><li>子网掩码（32位）：将IP地址划分成网络地址和主机地址<br>由连续的1和0组成，连续的1表示网络地址，连续的0表示主机地址，通过0的个数可以计算出子网的容量（子网中主机的IP地址范围，一个子网可以连多少台电脑）<br>每个子网的第一个IP地址为网段地址，最后一个IP地址为广播地址<br>255.255.255.0<br>8个0表示该子网掩码划分出的子网容量为256，这256个地址中可用地址只有254个</li><li>网关：一个网络通向其他网络的IP地址<br>设置好网关的IP地址，TCP/IP协议才能实现不同网络之间的相互通信<br>网关的IP地址是具有路由功能的设备的IP地址<br>具有路由功能（数据从一个子网传输到另一个子网）的设备有路由器、启用了路由协议的服务器(实质上相当于一台路由器)、代理服务器(也相当于一台路由器)。<ol><li>交换机：在数据链路层（第二层）工作，根据MAC地址将数据包转发到目标设备</li></ol></li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单片机原理及应用</title>
      <link href="/posts/6dd71ccc.html"/>
      <url>/posts/6dd71ccc.html</url>
      
        <content type="html"><![CDATA[<h2 id="单片机结构原理"><a href="#单片机结构原理" class="headerlink" title="单片机结构原理"></a>单片机结构原理</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li><p>思维导图</p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  grey;">预览  </button><div class="hide-content"><p><img src="https://s2.loli.net/2023/10/22/RuBGNHS7LfTIUlp.png" alt="单片机原理及应用1.png"></p></div></div><p>详情见：<a href="https://www.kdocs.cn/view/l/cqXFH1dDSKpn?from=docs">https://www.kdocs.cn/view/l/cqXFH1dDSKpn?from=docs</a></p></li></ul>              </div>            </details><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li><p>思维导图</p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  grey;">预览  </button><div class="hide-content"><p><img src="https://s2.loli.net/2023/10/23/yGEiobBAYCuSP7H.png" alt="单片机原理及应用2.png"></p></div></div></li><li><p>小结</p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  grey;">预览  </button><div class="hide-content"><p><img src="https://s2.loli.net/2023/10/23/3SUGdrmzDPejTZR.jpg" alt="屏幕截图 2023-10-23 092916.jpg"></p></div></div></li></ul>              </div>            </details><h2 id="51系列单片机的中断系统"><a href="#51系列单片机的中断系统" class="headerlink" title="51系列单片机的中断系统"></a>51系列单片机的中断系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li><p>思维导图</p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  grey;">预览  </button><div class="hide-content"><p><img src="https://s2.loli.net/2023/10/24/OZkNBQAz4FqKamh.png" alt="单片机原理及应用3.png"></p></div></div><p>详情见：<a href="https://www.kdocs.cn/view/l/ceSlDz6tGr7G?from=docs">https://www.kdocs.cn/view/l/ceSlDz6tGr7G?from=docs</a></p></li><li><p>中断处理过程示意图：</p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  grey;">预览  </button><div class="hide-content"><p><img src="https://s2.loli.net/2023/10/24/26UFT7cDQVpxgLS.jpg" alt="中断处理过程示意图"></p></div></div></li><li><p>程序存储器ROM中中断源位置</p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  grey;">预览  </button><div class="hide-content"><p><img src="https://s2.loli.net/2023/10/24/RENtCov8Y1IgMzp.jpg" alt="程序存储器ROM中中断源位置"></p></div></div></li></ul><ol><li>由于各中断入口间只有8个字节，一般情况下不够安排一个完整的中断服务程序。因此，通常总是在中断入口地址处放置一条无条件转移指令，使程序转向真正存放中断服务程序的地址</li><li>中断服务程序编程注意点：<ul><li>根据需要保护现场</li><li>及时清除不能被硬件自动清除的中断请求标志</li><li>中断服务程序中的压栈和出栈指令必须成对使用,以避免堆栈数据出错</li></ul></li><li>串口中断提出申请, 且主程序累加器A需保护，编程注意：<ul><li>在 0000H放一条跳转到主程序的跳转指令, 这是因为  MCS-51单片机复位后, PC的内容变为 0000H, 程序从 0000H 开始执行, 紧接着 0023H是中断程序入口地址, 故在此中间只能插入一条转移指令</li><li>响应中断时, 先自动执行一条隐指令“LCALL 0023H”, 而 0023H至 002BH（串行口中断入口地址）之间可利用的存储单元不够, 故放一条无条件转移指令</li><li>对串行口中断标志位硬件不能自动清除,所以一定要在中断服务程序中要有清标志位RI和TI的指令CLR RI和CLR TI</li><li>在中断服务程序的末尾, 必须安排一条中断返回指令RETI, 使程序自动返回主程序</li></ul></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><ul><li><p>P1.4～P1.7接有四个发光二极管，P1.0～P1.3接四个开关，消抖电路产生中断请求信号，当消抖电路的开关来回拔动一次产生一个下降沿信号，通过INT0  向CPU申请中断，初时发光二极管全灭，每中断一次，P1.0～P1.3所接的开关状态反映到发光二极管上，且要求开关断开的对应发光二极管亮</p></li><li><p>SJMP $:</p><p>跳转到本指令的起始位置开始执行,如果系统的中断是开放的，那么SJMP $指令实际上是在等待中断，当有中断申请后，CPU 转至执行中断服务程序<br>中断返回时，仍然返回到这条死循环指令，继续等待中断，而不是返回到该指令的下一条指令。这是因为执行该指令后，PC 仍指向这条指令，中断的断点就是这条指令的首字节地址</p></li><li><p>汇编语言</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">        ORG   0000H             </span><br><span class="line">        AJMP  MAIN         ；初始化</span><br><span class="line">        ORG   0003H        ；INT0中断入口    </span><br><span class="line">        AJMP  SER1         ；转中断服务程序    </span><br><span class="line">        ORG   0030H        ；主程序    </span><br><span class="line">MAIN：   MOV   P1，#0FH     ；高4位灯灭，低四位输入写1</span><br><span class="line">        SETB  IT0          ；边沿触发中断    </span><br><span class="line">        SETB  EX0          ；允许外中断0中断    </span><br><span class="line">        SETB  EA           ；开中断开关</span><br><span class="line">        SJMP  $            ；等待中断</span><br><span class="line">        ORG   0050H</span><br><span class="line">SER1：  MOV   A，P1        ；    </span><br><span class="line">        SWAP  A            ；累加器A的高半字节和低半字节互换</span><br><span class="line">        MOV   P1，A        ；P1.0～P1.3所接的开关状态反映到发光二极管上</span><br><span class="line">        RETI    </span><br><span class="line">        END  </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>C语言（C51编译器）<br>编译器在规定的中断源的矢量地址中放入无条件转移指令，使CPU响应中断后自动地从矢量地址跳转到中断服务程序的实际地址，而无需用户去安排<br>中断服务程序定义为函数，函数的完整定义如下:<br>返回值  函数名(［参数］) interrupt n［using m］<br>interrupt n：将函数声明为中断服务函数，n为中断源编号，0～31间的整数，编译器从8n+3处产生中断向量地址，n不允许是带运算符的表达式<br>using m：函数使用的工作寄存器组，m的取值范围为0～3，可缺省<ul><li>影响：函数入口处将当前寄存器保存，使用m指定的寄存器组，函数退出时原寄存器组恢复。选不同的工作寄存器组，可方便实现寄存器组的现场保护</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg51.h&gt;</span>  </span></span><br><span class="line">int0( ) interrupt <span class="number">0</span>   <span class="comment">/*INT0中断函数*/</span> </span><br><span class="line">｛  P1=<span class="number">0x0f</span>;          <span class="comment">/*输入端先置1，灯灭*/</span></span><br><span class="line">    P1&lt;&lt;=<span class="number">4</span>;           <span class="comment">/* 读入开关状态，并左移四位，</span></span><br><span class="line"><span class="comment"> ｝                   使开关反映在发光二极管上*/</span>        </span><br><span class="line">main( )    </span><br><span class="line">｛          </span><br><span class="line">   EA=<span class="number">1</span>;           <span class="comment">/*开中断总开关*/</span>    </span><br><span class="line">   EX0=<span class="number">1</span>;          <span class="comment">/*允许INT0中断*/</span>    </span><br><span class="line">   IT0=<span class="number">1</span>;          <span class="comment">/*下降沿产生中断*/</span></span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>);       <span class="comment">/*等待中断,语句进入死循环等待中断，当拨动INT0的开关后，进入中断函数，读入P1.0～P1.3的开关状态并将状态数据右移四位到P1.4～P1.7的位置上输出控制LED亮，执行完中断，返回到等待中断的while(1)语句，等待下一次的中断。*/</span>    </span><br><span class="line"> ｝    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><ul><li><p>AT89S51的P1口接一个共阴极的数码管，利用消抖开关产生中断请求信号，每来回拔动一次开关，产生一次中断，用数码管显示中断的次数(最多15次，十六进制数显示)</p></li><li><p>汇编语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">       ORG   0000H                </span><br><span class="line">       AJMP  MAIN    </span><br><span class="line">       ORG   0013H          ；INT1中断入口    </span><br><span class="line">       AJMP  INT1           ；转中断服务程序    </span><br><span class="line">       ORG   0030H          ；主程序    </span><br><span class="line">MAIN： SETB  IT1            ；边沿触发中断    </span><br><span class="line">       SETB  EX1            ；允许INT1中断    </span><br><span class="line">       SETB  EA             ；开中断开关    </span><br><span class="line">       MOV   R0，#0         ；计数初值为0    </span><br><span class="line">       MOV   A，#3FH        ；“0”的字形码送A    </span><br><span class="line">   MOV   DPTR，#TAB     ；指向数码表    </span><br><span class="line">WAIT： SJMP  WAIT           ；等待中断 </span><br><span class="line">INT1： INC   R0            ；中断次数加1    </span><br><span class="line">       MOV   A， R0    </span><br><span class="line">       MOVC  A， @A+DPTR   ；查表    </span><br><span class="line">       MOV   P1，A</span><br><span class="line">       CJNE  R0，#0FH   RE  </span><br><span class="line">       MOV   R0，#0</span><br><span class="line">RE：   RETI                ；AL1地址→PC，返主程序AL处</span><br><span class="line">TAB： DB   3FH，06H，5BH，4FH，66H，6DH</span><br><span class="line">      DB   7DH，07H，7FH，6FH，77H，7CH</span><br><span class="line">      DB   39H，5EH，79H，71H             ；字形码表</span><br><span class="line">      END  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>C语言(在中断服务程序中控制中断次数)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg51.h&gt;</span>    </span></span><br><span class="line"><span class="type">char</span> i;    </span><br><span class="line">code <span class="type">char</span> tab［<span class="number">16</span>］= ｛<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4F0</span>x66,<span class="number">0x6d</span>,<span class="number">0x7d</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x7f</span>,<span class="number">0x6f</span>,<span class="number">0x77</span>,<span class="number">0x7c</span>,<span class="number">0x39</span>,<span class="number">0x5e</span>,<span class="number">0x79</span>,<span class="number">0x71</span>｝; </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span>() interrupt <span class="number">2</span>    </span><br><span class="line">｛    </span><br><span class="line">     i++    </span><br><span class="line">     <span class="keyword">if</span> (i＜<span class="number">16</span>) P1=tab［i］；    </span><br><span class="line">     <span class="keyword">else</span>｛i=<span class="number">0</span>;P1=<span class="number">0x3f</span>;｝</span><br><span class="line">  ｝    </span><br><span class="line">main()</span><br><span class="line">｛    </span><br><span class="line">    EA=<span class="number">1</span>;    </span><br><span class="line">    EX1=<span class="number">1</span>;     </span><br><span class="line">    IT1=<span class="number">1</span>;</span><br><span class="line">    P1=<span class="number">0x3f</span>；    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);          <span class="comment">/*等待中断*/</span>    </span><br><span class="line">  ｝ </span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><h2 id="MCS-51单片机定时-计数器"><a href="#MCS-51单片机定时-计数器" class="headerlink" title="MCS - 51单片机定时/计数器"></a>MCS - 51单片机定时/计数器</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ol><li><p>定时/计数器用途：</p><ul><li>输出一定频率、一定占空比的波形</li><li>测量脉冲宽度</li><li>对外部信号计数</li><li>扩展外部中断</li></ul></li><li><p>初始化编程：</p><ul><li>方式选择、定时或计数的选择（1计数，0定时）、是否使用门控信号反映在TMOD中</li><li>计算计数值，填写在TL0、TH0或TL1、TH1中</li><li>如果使用定时中断，则需要进行中断的初始化，包括IE（开放中断EA=1, 定时器Tx 中断允许ETx=1 ）、IP寄存器的设定</li><li>启动定时器工作，设置TCON中的TR0或TR1</li></ul></li><li><p>T0/T1对外部时钟计数（外部脉冲的下降沿触发计数）时，外时钟的最大频率振荡频率的1/24<br>计数器在每个机器周期S5P2(第5个状态周期的P2节拍)期间采样，若一个机器周期采样值为1，下一个机器周期采样值为0，则计数器加1<br>因此 ，外部计数脉冲一个周期最少两个机器周期，即24个振荡周期</p></li><li><p>JBC指令：判断可位寻址区域内指定位是否为1，为1则跳转到指定位置，并同时清除该位（置0）</p></li><li><p>CPL指令：直接寻址位取反</p></li><li><p>系统复位后，SP的初始值为07H，使得堆栈实际上是从08H开始的。但我们从RAM的结构分布中可知，08H—1FH隶属1—3工作寄存器区，若编程时需要用到这些数据单元，必须对堆栈指针SP进行初始化，原则上设在任何一个区域均可，但一般设在30H—1FH之间较为适宜。<br>在8051单片机中，入栈SP+2,出栈SP-2</p></li><li><p>通常T1用作串行接口的波特率发生器时，T0工作在方式3</p></li></ol><h3 id="方式-0-的应用"><a href="#方式-0-的应用" class="headerlink" title="方式  0 的应用"></a>方式  0 的应用</h3><p>题目：利用定时器T1定时，在P1.0输出周期为  1 ms的方波, 设单片机晶振频率为 6 MHz<br>分析：</p><ul><li>每隔 0.5ms对  P1.0 取反一次即可得到这个方波</li><li>计算计数初值：<br>机器周期=12÷6 MHz= 2 μs<br>需要计数次数N:N=0.5ms÷2 μs =250<br>初值X=M－N=8 192－250=7 942=1F06H   0001 1111 000 | 0 0110<br>13 位计数器,TL1 使用了低5位 00110（06H）,TH1用8位（6~13位）1111 1000(F8H)<br>TMOD初始化: TMOD=0000 0000B=00H<br>TCON初始化: 启动TR1=1<br>IE初始化: 开放中断EA=1, 定时器T1 中断允许ET1=1</li></ul><ul><li><p>汇编语言(直接查溢出标志位)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">       ORG  0000H     </span><br><span class="line">       AJMP  START          ; 复位入口</span><br><span class="line">       ORG  0030H</span><br><span class="line">START: MOV  SP, ＃60H        ; 数据缓冲区（30H~7FH），用于堆栈</span><br><span class="line">       MOV  TH1, ＃0F8H     ; T1赋初值</span><br><span class="line">       MOV  TL1, ＃06H</span><br><span class="line">       MOV  TMOD, ＃00H</span><br><span class="line">       SETB  TR1            ; 启动T1</span><br><span class="line">LP1:   JBC   TF1,   LP2     ;查询定时器1溢出标志位是否置1，为1转到LP2</span><br><span class="line">       AJMP   LP1</span><br><span class="line">LP2:   MOV  TH1, ＃0F8H     ; T1赋初值</span><br><span class="line">       MOV  TL1, ＃06H</span><br><span class="line">       CPL    P1.0          ；P1.0位取反</span><br><span class="line">       AJMP  LP1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>C语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line">sbit  p10=p1^<span class="number">0</span>;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    TMOD=<span class="number">0</span>;</span><br><span class="line">    TH1=<span class="number">0xf8</span>;</span><br><span class="line">    TL1<span class="number">-0x06</span>;</span><br><span class="line">    TR1=<span class="number">1</span>;</span><br><span class="line">    While(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">do</span>  &#123; &#125;  <span class="keyword">while</span>(TF1==<span class="number">0</span>);</span><br><span class="line">             P10=~p10; </span><br><span class="line">             TH1=<span class="number">0xf8</span>;</span><br><span class="line">            TL1<span class="number">-0x06</span>;</span><br><span class="line">            TF1=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>汇编语言(采用中断)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">       ORG  0000H     </span><br><span class="line">       AJMP  START             ; 复位入口</span><br><span class="line">       ORG  001BH</span><br><span class="line">       AJMP  T1INT             ; T1中断入口</span><br><span class="line">       ORG  0030H</span><br><span class="line">START: MOV  SP, ＃60H          ; 初始化程序</span><br><span class="line">       MOV  TH1, ＃0F8H        ; T0赋初值</span><br><span class="line">       MOV  TL1, ＃06H</span><br><span class="line">       MOV  TMOD, ＃00H</span><br><span class="line">       SETB  TR1               ; 启动T1 </span><br><span class="line">       SETB  ET1               ; 开T1中断</span><br><span class="line">       SETB  EA                ; 开总允许中断</span><br><span class="line"> MAIN: AJMP  MAIN              ; 主程序,等待中断</span><br><span class="line">T1INT: CPL  P1.0</span><br><span class="line">       MOV  TL1,  ＃06H</span><br><span class="line">       MOV  TH1, ＃0F8H</span><br><span class="line">       RETI</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><h2 id="单片机串行口及应用"><a href="#单片机串行口及应用" class="headerlink" title="单片机串行口及应用"></a>单片机串行口及应用</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ol><li>在串行异步传送中,CPU与外设之间事先必须约定：<ul><li>字符格式：用ASCII码通信，有效数据为7位,加1个奇偶校验位、1个起始位（”0”）和1个停止位（”1”）共10位。停止位也可大于1位</li><li>波特率(Baudrate):波特率是数据的传送速率,即每秒钟传送的二进制位数,单位为位/秒。它与字符的传送速率(字符/秒)之间存在如下关系<br>波特率=位/字符×字符/秒=位/秒<br>发送端与接收端的波特率必须一致<br>这里的波特率相当于通原中的传信率bit/s，传码率(符号/s)<br><strong>波特率是可变的, 它取决于定时器 T1 的溢出速率及SMOD的状态</strong></li></ul></li><li>与方式1不同, 方式2和3中装入RB8的是第9位数据, 而不是停止位。所接收的停止位的值与SBUF、 RB8 和 RI都没有关系, 这一特点可用于多机通信</li><li><p>串行口的初始化编程:</p><ul><li>按选定的串口工作方式设定SCON的SM0、SM1位</li><li>对于工作方式 2 或 3, 应根据需要在TB8中写入待发送的第9位数据</li><li>若选定的不是方式 0，还需设定接收/发送的波特率</li><li>设定SMOD(在PCON的最高位)的状态, 以控制波特率是否加倍</li><li>若选定工作方式1或3, 则应对定时器T1进行初始化以设定其溢出率</li></ul></li><li><p>四种工作方式：<br> 方式1为8位通信， 波特率可变<br> 方式2为9位通信，波特率为两种可选<br> 方式3为9位通信， 波特率可变</p></li><li><p>方式1和方式3波特率与T1溢出率有关，<br>通常T1工作在方式2，对机器周期计数，<br>计算溢出率 时，如果T1工作在0，1方式，则会产生误差</p></li><li><p>定时器T1作为波特率发生器, 通常选用定时方式2（8 位重装载初值方式），此时禁止 T1 中断</p></li><li><p>波特率设计：</p><ul><li>方式0：波特率（固定）=fosc（晶振频率）/12</li><li>方式2：波特率（两种情况）<ul><li>SMOD=0，fosc/64</li><li>SMOD=1，fosc/32</li></ul></li><li>方式1（传10位，8位数据位）和方式3（传11位，有个用户定义位，一般是奇偶校验位）<script type="math/tex; mode=display">\frac{2^{SMOD} }{32} \times \frac{f_{osc} }{12\times (2^{8} -TH_{1} (计数初值))}</script></li></ul></li></ol><ol><li>总结：<ul><li>SCON(串行接口控制寄存器，可位寻址)：串口工作方式选择，是否允许接收，查询有无发送/接收中断</li><li>PCON(电源控制寄存器，不可位寻址)：D7位SMOD，为“1”，波特率加倍，为“0”，波特率不加倍</li><li>若用到定时器T1<br>TR1置1，定时器启动<br>TMOD（定时器/计数器方式寄存器，不可位寻址）：控制定时器的工作方式，T1在方式2<br>设置计数初值：TH1,TL1</li></ul></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="题一"><a href="#题一" class="headerlink" title="题一"></a>题一</h4><p>设某单片机系统需通过串行口与一微机系统双向通信,采用1位起 始位、8位数据和1位停止位的协议，波特率为2400。单片机上电复位后，首先向微机发送一个55H。编写单片机的初始化程序</p><ul><li>分析：<br>单片机串行口应工作于方式1，允许接收，SCON=01010000B;<br>  采用Timer1作波特率发生器，T1工作于方式2，定时方式，TMOD=20H<br>  T1初值为F4H</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MOV   SCON,   #01010000B　；初始化串口</span><br><span class="line">MOV   PCON,   #00H           ；SMOD=0</span><br><span class="line">MOV   TMOD,  #20H            ; # 0010 0000　初始化定时器1</span><br><span class="line">MOV    TH1,      #0F4H       ;TL1计数溢出时，将TH1的内容重新装载到TL1</span><br><span class="line">MOV    TL1,      #0F4H</span><br><span class="line">SETB    TR1                         ; 启动定时器</span><br><span class="line">SETB    ES                            ; 允许串口中断</span><br><span class="line">SETB    EA                           ;  开中断总开关</span><br><span class="line">MOV     SBUF ,  #55H         ; 向微机发送#55H</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题二"><a href="#题二" class="headerlink" title="题二"></a>题二</h4><p>设有两个单片机系统甲和乙。两系统均工作于全双工中断方式，串行口工作于方式３，第９位数据为奇偶校验位，CPU 时钟为11.0592MHz。定时器T1工作于方式２，波特率2400, SMOD=0,将系统乙内外部数据存储器7C00H~7CC7H共200个字节的数据传送到系统甲中外部数据存储器7E00H~7EC7H中；将系统甲内外部数据存储器7C00H~7CC7H共200个字节的数据传送到系统乙中外部数据存储器7E00H~7EC7H中。编写两个系统的程序</p><ul><li><p>分析：<br>源数据均在7C00H~7CC7H，共200个字节，目的数据区首址为7E00H<br>　SCON=11010000B=D0H  ,<br> PCON=00H  ,<br> TMOD=00100000B=20H<br> 2400=(20/32) x(11.0592/12(28-Z))  ,   Z=F4H</p></li><li><p>位传送时需通过累加器C<br>奇偶标志位P位于PSW（程序状态寄存器），观测累加器A中“1”的个数，P=0,1有偶数个；P=1,1有奇数个</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">ADDR1H   EQU     30H        ;源数据指针</span><br><span class="line">ADDR1L   EQU     31H        ;</span><br><span class="line">ADDR2H   EQU     32H        ;目的数据指针</span><br><span class="line">ADDR2L   EQU     33H       </span><br><span class="line">RECV     EQU     34H       ；接收数据计数器</span><br><span class="line">SEND     EQU     35H       ；发送数据计数器</span><br><span class="line">         ORG    0000H</span><br><span class="line">         LJMP     MAIN</span><br><span class="line">         ORG    0023H</span><br><span class="line">         LJMP     INTS     ；保护断点</span><br><span class="line">         ORG  0030H</span><br><span class="line">MAIN: MOV  ADDR2H,  #7EH     ; 目的指针初值，存发送数据</span><br><span class="line">  MOV  ADDR2L,  #0H</span><br><span class="line">MOV  ADDR1H,  #7CH     ; 源指针初值，存接收数据</span><br><span class="line">  MOV  ADDR1L,  #0H</span><br><span class="line">MOV  RECV,  #0H            ;  接收数据初值</span><br><span class="line">MOV  SEND,  #0H            ;  发送数据初值</span><br><span class="line"></span><br><span class="line">MOV TMOD,   #20H           ;T1初始化</span><br><span class="line"> MOV TH1,       #0F4H</span><br><span class="line">MOV TL1,       #0F4H</span><br><span class="line">SETB  TR1</span><br><span class="line">MOV  SCON,  #0D0H       ; 串口初始化   1101 0000</span><br><span class="line">MOV  PCON , #0</span><br><span class="line">SETB  ES                          ; 开串口中断</span><br><span class="line">SETB  EA</span><br><span class="line"></span><br><span class="line">MOV  DPH,  ADDR1H    ;源指针初值送DPTR</span><br><span class="line">MOV  DPL,  ADDR1L</span><br><span class="line">MOVX  A,   @DPTR　　；取第一个要发送的数</span><br><span class="line">MOV   C,  P                     ;  取奇偶校验位</span><br><span class="line">MOV  TB8,  C　　　　　；奇偶校验位送TB8</span><br><span class="line">MOV  SBUF,  A　　　　；发送一个数　</span><br><span class="line">INC    SEND　　；发送计数器加１</span><br><span class="line">LOOP:  LJMP  LOOP　　　　　</span><br><span class="line"></span><br><span class="line">INTS: PUSH   PSW　　；保护断点</span><br><span class="line">PUSH   ACC</span><br><span class="line">PUSH   DPL</span><br><span class="line">PUSH   DPH </span><br><span class="line">JB    TI,    TPROG  ；每发送完一个数据，发送中断标志位TI置1</span><br><span class="line">JB    RI,    RPROG</span><br><span class="line">LJMP  INTSE    ；没有中断，恢复现场</span><br><span class="line">TPROG:  CLR  TI　　　　　　　            ；发中断处理,清标志</span><br><span class="line">MOV   A,  SEND</span><br><span class="line">CJNE  A,  #200,  TPROG1　　；200个数没发完</span><br><span class="line">LJMP  INTSE　　　　　　　   ；200个数发完，退出中断</span><br><span class="line">TPROG1: INC       DPTR </span><br><span class="line">MOV    ADDR1H,   DPH　      ；改源指针</span><br><span class="line">MOV    ADDR1L,   DPL　</span><br><span class="line">       MOV   DPH,  ADDR1H</span><br><span class="line">MOV   DPL,  ADDR1L</span><br><span class="line">MOVX  A,    @DPTR</span><br><span class="line">MOV   C,   P</span><br><span class="line">MOV   TB8,   C</span><br><span class="line">MOV    SBUF,  A　　</span><br><span class="line">INC       SEND　　　　　       ；发送计数器加1</span><br><span class="line">LJMP    INTSE </span><br><span class="line"></span><br><span class="line">RPROG:  CLR  RI　　　　      ；接收中断处理程序</span><br><span class="line">MOV  A,  RECV</span><br><span class="line">CJNE  A,  #200,  RPROG1</span><br><span class="line">LJMP  INTSE　　   ；200个数接收完，退出中断服务程序</span><br><span class="line">RPROG1:  MOV  A,  SBUF　  ；取收到的数据</span><br><span class="line">MOV  C,   RB8　   ；收到的第9位送C</span><br><span class="line">ANL   C,   /P</span><br><span class="line">       CPL C</span><br><span class="line">JC    ERR　　        ；C为1，校验出错　　　</span><br><span class="line">MOV   DPH,  ADDR2H</span><br><span class="line">MOV   DPL,  ADDR2L　；</span><br><span class="line">MOVX  @DPTR,   A </span><br><span class="line">       INC    DPTR</span><br><span class="line">MOV ADDR2H,   DPH</span><br><span class="line">MOV   ADDR2L,  DPL 　；修改目的数据指针</span><br><span class="line">INC  RECV　　　　　　；修改接收计数器</span><br><span class="line">LJMP   INTSE</span><br><span class="line"></span><br><span class="line">ERR:   SETB  F0</span><br><span class="line">INTSE: POP   DPH    ；恢复断点</span><br><span class="line">POP    DPL</span><br><span class="line">POP    A </span><br><span class="line">POP     PSW</span><br><span class="line">RETI　　　；中断返回</span><br><span class="line">       END </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通信原理</title>
      <link href="/posts/f21a0185.html"/>
      <url>/posts/f21a0185.html</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <h3 id="通信系统组成框图中各部分的作用"><a href="#通信系统组成框图中各部分的作用" class="headerlink" title="通信系统组成框图中各部分的作用"></a>通信系统组成框图中各部分的作用</h3><ol><li>信源编码<ul><li>压缩冗余度，提高信息传输的有效性</li><li>完成A/D转换</li></ul></li><li>信道编码<ul><li>增加冗余度，纠正错码，提高通信系统的可靠性</li></ul></li><li>调制：把基带信号（频谱从零频附近开始的低频信号）的频谱搬移到高频处，形成适合在信道中传输的带通信号（高频谱）<br>调幅波——检波（解调）<br>调频波——鉴频（解调）<br>作用：<ul><li>便于器件小型化</li><li>实现多路同频信号的同时传输，提高信道利用率</li><li>回避干扰信号，减少系统干扰</li></ul></li></ol><h3 id="数字通信的特点"><a href="#数字通信的特点" class="headerlink" title="数字通信的特点"></a>数字通信的特点</h3><p>优点：</p><ul><li>抗干扰能力强，且噪声不积累</li><li>通过信道编码技术使传输差错可控</li><li>便于处理，变换，存储</li><li>灵活，将来自不同信源的信号综合到一起传输</li><li>易于集成，加密</li></ul><p>缺点：</p><ul><li>需要较大的传输带宽（采样定理，8位，模拟电话4kHz带宽，数字电话4x2x8=64kHz带宽）</li><li>对同步要求高</li></ul><h3 id="符号平均信息量（信源熵）的计算"><a href="#符号平均信息量（信源熵）的计算" class="headerlink" title="符号平均信息量（信源熵）的计算"></a>符号平均信息量（信源熵）的计算</h3><script type="math/tex; mode=display">H(x)=-\sum_{i=1}^{M} P(x_{i} )\lg_{2}{P(x_{i})} (b/符号)</script><ul><li>等概时，信源熵最大</li></ul><h3 id="通信系统可靠性和有效性指标"><a href="#通信系统可靠性和有效性指标" class="headerlink" title="通信系统可靠性和有效性指标"></a>通信系统可靠性和有效性指标</h3><div class="note info flat"><p>有效性：传输一定信息量所占用的频带宽度，及频带利用率<br>可靠性：传输信息的准确程度</p></div><h4 id="模拟通信系统"><a href="#模拟通信系统" class="headerlink" title="模拟通信系统"></a>模拟通信系统</h4><ol><li>有效性：传输带宽越小，频带利用率越高，有效性越好，调幅信号的有效性比调频好</li><li>可靠性：信噪比（S/N，输出信号与噪声功率比，越高抗噪能力越强）,调频信号的信噪比比调幅的高</li></ol><h4 id="数字通信系统"><a href="#数字通信系统" class="headerlink" title="数字通信系统"></a>数字通信系统</h4><p>$R_{B}$ :码元（符号）传输速率，单位Baud(波特，符号/s),每秒传输码元的数目</p><p>$T_{B}$ :单个码元的长度（持续时间）</p><p>B ：系统带宽</p><p>$R_{b}$ :信息传输速率（传信率，比特率），每秒传输的平均信息量，单位b/s(bps,二进制)</p><script type="math/tex; mode=display">R_{b}=R_{B}\cdot H</script><p>等概时：</p><script type="math/tex; mode=display">R_{b}=R_{B}\log_{2}{M}</script><ol><li>有效性：单位带宽（每赫）内的传输速率（频带利用率）<script type="math/tex; mode=display">\eta =\frac{R_{B} }{B} （Baud/Hz）</script><script type="math/tex; mode=display">\eta_{b} =\frac{R_{b} }{B} (b/(s\cdot Hz))</script></li><li><p>可靠性：差错概率，用误码率，误信率表示<br>误码率：<script type="math/tex">P_{e}=\frac{错误码元数}{传输总码元数}</script><br>误信率：<script type="math/tex">P_{b}=\frac{错误比特数}{传输总比特数}</script></p><p>误信率小于等于误码率</p></li></ol>              </div>            </details><h2 id="随机过程"><a href="#随机过程" class="headerlink" title="随机过程"></a>随机过程</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <h3 id="广义平稳随机过程的判定规则"><a href="#广义平稳随机过程的判定规则" class="headerlink" title="广义平稳随机过程的判定规则"></a>广义平稳随机过程的判定规则</h3><ol><li>均值与t无关，为常数</li><li>自相关函数只与时间间隔有关</li></ol><h3 id="各态历经性"><a href="#各态历经性" class="headerlink" title="各态历经性"></a>各态历经性</h3><ol><li>定义：统计平均等于时间平均</li><li>具有各态历经性的随机过程一定是平稳过程，反之不成立。在通信系统中，随机信号和噪声满足各态历经性</li></ol><h3 id="平稳过程自相关函数的性质"><a href="#平稳过程自相关函数的性质" class="headerlink" title="平稳过程自相关函数的性质"></a>平稳过程自相关函数的性质</h3><ol><li>R(0)（随机过程平方的均值）：时域计算的总功率（某个时刻点所有的功率之和），信号的平均功率</li><li>R(∞)（随机过程均值的平方）：信号的直流功率</li><li>R(0)－R(∞)：信号的交流功率，等于方差</li></ol><h3 id="维纳——辛钦定理"><a href="#维纳——辛钦定理" class="headerlink" title="维纳——辛钦定理"></a>维纳——辛钦定理</h3><ol><li>内容：平稳过程的功率谱密度P（f）与其自相关函数R(τ)是傅里叶变换对</li><li>对 P(f)积分，得到平稳过程的平均功率R(0)</li></ol><h3 id="高斯（正态）随机过程"><a href="#高斯（正态）随机过程" class="headerlink" title="高斯（正态）随机过程"></a>高斯（正态）随机过程</h3><ol><li><p>性质</p><ul><li>若为广义平稳，则也为严平稳</li><li>高斯过程经过线性变换后生成的过程仍是高斯过程。因此，若线性系统的输入为高斯过程，则系统输出也是高斯过程</li></ul></li><li><p>高斯随机变量</p></li></ol><script type="math/tex; mode=display">f(x)=\frac{1}{\sqrt{2\pi }\sigma  } e^{-\frac{(x-a )^{2} }{2\sigma ^{2} } }</script><ol><li><p>正态分布函数 </p><ul><li>定义：正态分布的概率密度f(x)的积分，用于通信系统的性能分析<script type="math/tex; mode=display">F(x)=P(\xi \le x )=1-\frac{1}{2} erfc(\frac{x-a}{\sqrt{2} \sigma } )</script><script type="math/tex; mode=display">互补误差函数：erfc(x)=1-erf(x)=\frac{2}{\sqrt{\pi } }  \int_{x}^{\infty } e^{-t^{2} } dt</script></li></ul></li><li><p>重要结论 ：输出过程的功率谱密度是输入过程的功率谱密度乘以系统频率响应模值的平方</p></li></ol><h3 id="窄带随机过程"><a href="#窄带随机过程" class="headerlink" title="窄带随机过程"></a>窄带随机过程</h3><ol><li><p>定义 ：</p><ul><li>$\bigtriangleup f\ll f_{c}(中心频率) $</li><li>$f_{c}$ 远离零频率</li></ul></li><li><p>结论：一个均值为零的窄带平稳高斯过程，它的同相分量和正交分量同样是平稳高斯过程，而且均值为零，方差相同。包络是瑞利分布，相位是均匀分布</p></li></ol><h3 id="正弦波加窄带高斯噪声"><a href="#正弦波加窄带高斯噪声" class="headerlink" title="正弦波加窄带高斯噪声"></a>正弦波加窄带高斯噪声</h3><p>&emsp;包络分布与信噪比有关：</p><ul><li>小信噪比，瑞利分布</li><li>大信噪比，高斯分布</li><li>一般情况，莱斯分布</li></ul><h3 id="高斯白噪声"><a href="#高斯白噪声" class="headerlink" title="高斯白噪声"></a>高斯白噪声</h3><p>高斯白噪声概率密度服从正态分布，功率谱密度服从均匀分布</p>              </div>            </details><h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <h3 id="信道的分类"><a href="#信道的分类" class="headerlink" title="信道的分类"></a>信道的分类</h3><ol><li><p>无线信道：利用电磁波在空间传播</p><ul><li>地波传播：频率较低（2MHz以下） ，有绕射能力</li><li>天波传播：频率较高（2MHz~30MHz）,利用电离层反射</li><li>视线传播：频率高于30MHz，穿透电离层<br>$h\approx \frac{D^{2} }{50} (m)$<br>h:收发天线高度<br>D:收发天线间距离</li></ul></li><li><p>有线信道：</p><ul><li>明线</li><li>对称电缆</li><li>同轴电缆</li></ul></li><li><p>调制信道模型：在研究调制系统时信道指调制信道，叠加有噪声的线性时变/时不变网络</p><ul><li>恒参信道：特性基本不随时间变化，非时变线性网络</li><li>随参信道：特性随时间随机变化</li></ul></li><li><p>编码信道模型：讨论信道编码时，信道表示编码信道，用转移概率来描述</p></li></ol><h3 id="恒参信道"><a href="#恒参信道" class="headerlink" title="恒参信道"></a>恒参信道</h3><ol><li>种类：<ul><li>有线信道</li><li>无线电中继和卫星通信等视线传播信道</li></ul></li><li><p>传输特性：</p><ul><li>幅频特性 |H（w）|</li><li>相频特性 φ（w）</li></ul></li><li><p>无失真传输：</p><ul><li>|H（w）|=K（常数）<br>若不等为幅频失真，是线性失真，可用线性网络进行补偿（线性网络的频率特性与信道频率特性之和 ，在信号频谱占用的频带内为一条水平直线）</li><li>φ（w）=wtd<br>若不等为相频失真，是线性失真，可用线性网络进行补偿</li></ul></li><li><p>幅频失真影响</p><ul><li>模拟信号：造成波形失真，信噪比下降</li><li>数字信号：产生码间串扰，误码率增大</li></ul></li><li><p>相频失真影响</p><ul><li>语音信号影响不大，视频信号影响大</li><li>数字信号：码间串扰，误码率增大</li></ul></li></ol><h3 id="随参信道"><a href="#随参信道" class="headerlink" title="随参信道"></a>随参信道</h3><ol><li>特性：<ul><li>衰减随时间变化</li><li>时延随时间变化</li><li>多径传播（信号经过几条路径到达接收端，且每条路径的时延和衰减随时间变化）</li></ul></li></ol><h3 id="多径效应"><a href="#多径效应" class="headerlink" title="多径效应"></a>多径效应</h3><ol><li>定义：多径传播对信号的影响</li><li>影响：<ul><li>瑞利型衰落（包络瑞利分布），快衰落</li><li>两径，波形的包络对应频谱中，频率弥散</li><li>多径，频率选择性衰落</li></ul></li></ol><h3 id="避免频率选择性衰落"><a href="#避免频率选择性衰落" class="headerlink" title="避免频率选择性衰落"></a>避免频率选择性衰落</h3><ol><li>信道相关带宽：相邻传输零点的频率间隔<script type="math/tex; mode=display">\bigtriangleup f=\frac{1}{\tau }</script></li><li><p>信道带宽：$B_{s}$<br>工程经验：</p><script type="math/tex; mode=display">B_{s}=(\frac{1}{3}\sim \frac{1}{5}  )\bigtriangleup f</script></li><li><p>数字信号的码元宽度(持续时间)：</p><script type="math/tex; mode=display">T_{s}=（3\sim  5 \tau）</script></li></ol><h3 id="信道容量"><a href="#信道容量" class="headerlink" title="信道容量"></a>信道容量</h3><ol><li>定义：信道能够无差错传输的最大平均信息速率</li><li>离散信道容量：信源发送的平均信息量(H(x),等概)-因信道噪声而损失的平均信息量</li><li>连续信道容量<script type="math/tex; mode=display">C=B\log_{2}{(1+\frac{S}{N} )} =B\log_{2}{(1+\frac{S}{n_{0}B } )}(b/s)</script><ul><li>S － 信号平均功率（W）；B － 带宽（Hz）<br>n0 －噪声单边功率谱密度；N = n0B －噪声功率（W）<br>结论：当带宽B趋于无穷大时，信道容量不趋于无穷大，而是趋于一个定值</li></ul></li></ol>              </div>            </details><h2 id="模拟调制系统"><a href="#模拟调制系统" class="headerlink" title="模拟调制系统"></a>模拟调制系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ol><li><p>输出信噪比：<script type="math/tex">\frac{S_{0}}{N_{0}}=\frac{解调器输出有用信号的平均功率}{解调器输出噪声的平均功率}</script></p></li><li><p>输入信噪比：<script type="math/tex">\frac{S_{i}}{N_{i}}</script></p></li><li><p>制度增益（信噪比增益）G:</p><script type="math/tex; mode=display">G=\frac{S_{0}/N_{0}}{S_{i}/N_{i}}</script></li><li><p>信道损耗：</p><script type="math/tex; mode=display">\alpha =10\log_{10}{\frac{S_{T}}{S_{i}} }</script><p><script type="math/tex">S_{T}</script> :发射信号功率<br><script type="math/tex">S_{i}</script> :解调器输入信号功率</p></li></ol><h3 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h3><ol><li><p>目的:</p><ul><li>进行频谱搬移，匹配信道特性，减小天线尺寸</li><li>实现多路复用，提高信道利用率</li><li>改善系统性能（有效性、可靠性）</li><li>实现频率分配</li></ul></li><li><p>载波<br>$ c(t)=A\cos (w_{c}t+ \varphi)  $</p></li><li><p>带宽B：看频谱正半轴</p></li><li>功率：看正负半轴</li></ol><h3 id="线性调制系统的抗噪声性能"><a href="#线性调制系统的抗噪声性能" class="headerlink" title="线性调制系统的抗噪声性能"></a>线性调制系统的抗噪声性能</h3><ol><li>性能好坏：<ul><li>同类调制系统，制度增益越大，解调器抗噪声性能越好</li><li>已调信号平均功率相同，信道噪声功率谱密度相同，输出信噪比越大，抗噪声性能越好</li></ul></li><li>模型：已调信号加信道加性高斯白噪声通过<strong>带通滤波器（BPF）</strong>得到已调信号和窄带高斯噪声通过解调器(乘相干载波再通过低通滤波器（LPF）)得到有用信号和噪声</li><li><p>窄带高斯噪声:<br>可用同相分量与正交分量表示:<script type="math/tex">n_{i}(t)=n_{c}(t)\cos w_{c}t - n_{s}(t)\sin w_{c}t</script><br>功率：<script type="math/tex">N_{i}=n_{0}B</script>(带通滤波器高度为1，带宽为B)</p><ul><li>经过相干解调后，正交分量被抑制，<script type="math/tex">n_{0}(t)=\frac{1}{2}n_{c}(t)</script>,功率：<script type="math/tex">N_{0}=\frac{1}{4}n_{0}B</script></li></ul></li><li><p>在相同的Si，n0。fH条件下,DSB,SSB的输出信噪比相等，抗噪声性能相同</p></li></ol><h3 id="非线性调制（角度调制）"><a href="#非线性调制（角度调制）" class="headerlink" title="非线性调制（角度调制）"></a>非线性调制（角度调制）</h3><ol><li>定义：载波的频谱结构发生改变</li><li>优势：抗噪声性能优于幅度调制</li><li>表达式：<script type="math/tex">s_{m}(t)=A\cos [w_{c}t+\varphi (t)]</script></li><li><p>分类：</p><ul><li>FM（调频）:<script type="math/tex">s_{FM}(t)=A\cos [w_{c}t+K_{f}\int m(\tau)d \tau ]</script></li><li>PM（调相）:<script type="math/tex">s_{PM}(t)=A\cos [w_{c}t+K_{p}m(t)]</script></li></ul></li><li><p>角度调制本质就是改变<script type="math/tex">K_{f},K_{p}</script></p></li></ol><h4 id="FM"><a href="#FM" class="headerlink" title="FM"></a>FM</h4><ol><li><p>分类：</p><ul><li>窄带调频（NBFM）：最大瞬时相位偏移<script type="math/tex">\left | K_{f}\int m(\tau)d \tau \right | \ll \frac{\pi }{6} （或0.5)</script><br>最大频偏较小,占据带宽较窄，抗噪声性能（可靠性）比AM好</li><li>宽带调频（WBFM）</li></ul></li><li><p>对于单音调频FM<br>调制信号：<script type="math/tex">m(t)=A_{m}\cos w_{m}t</script><br>已调信号表达式：<script type="math/tex">s_{FM}(t)=A\cos [w_{c}t+K_{f}A_{m}\int \cos w_{m}\tau d\tau ]=A\cos [w_{c}t+m_{f}\sin w_{m}t]</script></p><ul><li><script type="math/tex">m_{f}</script>：调频指数(最大相位偏移)</li><li><script type="math/tex; mode=display">m_{f}=\frac{K_{f}A_{m}  }{\omega _{m} } =\frac{\bigtriangleup \omega }{\omega _{m} } =\frac{\bigtriangleup f}{f_{m} }</script></li><li><script type="math/tex">\bigtriangleup \omega =K_{f}A_{m}</script>：最大角频偏</li><li><script type="math/tex">\bigtriangleup f</script>：最大频偏</li></ul></li><li><p>带宽：对于多音或 任意带限信号调制时的调频信号带宽用卡森公式估算</p><script type="math/tex; mode=display">B_{FM}=2(m_{f}+1)f_{m}=2(\bigtriangleup f+f_{m})</script></li><li><p>功率：平均功率等于未调载波的平均功率，分配给边频分量的比例与调频指数有关</p></li><li><p>解调：</p><ul><li>非相干解调:<script type="math/tex">m_{0}（t）=K_{d} K_{f}m(t)</script><br><script type="math/tex">K_{d}</script>:鉴频器灵敏度</li><li>相干解调：只适用NBFM</li></ul></li></ol><h3 id="调频系统的抗噪声性能分析"><a href="#调频系统的抗噪声性能分析" class="headerlink" title="调频系统的抗噪声性能分析"></a>调频系统的抗噪声性能分析</h3><h4 id="大信噪比"><a href="#大信噪比" class="headerlink" title="大信噪比"></a>大信噪比</h4><ol><li>制度增益：<script type="math/tex">G_{FM}=3m_{f}^2(m_{f}+1)</script></li><li>输入信噪比： <script type="math/tex">\frac{\frac{A^{2} }{2} }{n_{0} B_{FM} }</script></li><li><script type="math/tex; mode=display">B_{FM}=2(m_{f}+1)f_{m}</script></li></ol><h3 id="门限效应"><a href="#门限效应" class="headerlink" title="门限效应"></a>门限效应</h3><p>输入信噪比下降，输出信噪比急剧恶化</p><h3 id="解调"><a href="#解调" class="headerlink" title="解调"></a>解调</h3><ol><li>相干解调：用到与发射端同频同相载波<ul><li>适用：AM、DSB、SSB、VSB</li><li>特点：无门限效应</li><li>要求：载波同步(同频同相)</li></ul></li><li>非相干解调（包络检波）：未用到与发射端同频同相载波<ul><li>适用：AM(小信噪比存在门限效应)</li><li>要求：<script type="math/tex">\left | m(t) \right |_{max} \le A_{0}</script></li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>抗噪声性能（可靠性）：FM最好，DSB/SSB、 VSB次之，AM最差</li><li>频谱利用率（有效性）：SSB最高，VSB较高，DSB/AM次之，FM最差；</li><li>功率利用率：FM最高，DSB/SSB、VSB次之，AM最差；</li><li>设备复杂度：AM最简，DSB/ FM次之，VSB较复杂， SSB最复杂</li></ol>              </div>            </details><h2 id="数字基带传输系统"><a href="#数字基带传输系统" class="headerlink" title="数字基带传输系统"></a>数字基带传输系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>数字基带信号：数字信号的频谱从零频或很低频开始</li><li>数字基带传输系统：基带信号不经过载波调制而直接进行传输</li><li>数字基带传输研究意义：<ul><li>近程数据通信系统广泛采用</li><li>基带包含带通系统的诸多基本问题</li><li>带通传输系统可等效成基带传输系统研究</li></ul></li><li>第一零点带宽（基带信号带宽）:<script type="math/tex">B=\frac{1}{\tau }</script></li><li>有直流分量：信号时域平均值不为零</li><li>归零（RZ）波形：有电脉冲宽度小于码元宽度，<script type="math/tex">\frac{\tau}{T_{B}}<1</script><ul><li>可直接提取位定时信号</li><li>占据更多带宽</li></ul></li><li>序列的带宽等于信号的带宽</li><li>差分波形：<ul><li>传号差分，0不变，1变</li><li>空号差分，0变，1不变</li></ul></li></ol><h3 id="基带信号的频谱特性"><a href="#基带信号的频谱特性" class="headerlink" title="基带信号的频谱特性"></a>基带信号的频谱特性</h3><ol><li>基带信号分解<ul><li>时域：<script type="math/tex">s(t)=v(t)(稳态波)+u(t)（交变波）</script></li><li>频域（功率谱密度）：<script type="math/tex">P_{s}(f)=P_{v}(f)+P_{u}(f)</script></li></ul></li><li>稳态波<ul><li>定义：随机序列s（t）的统计平均分量（二进制基带信号即为两种波形的叠加），在每个码元内波形相同，是周期信号，周期为<script type="math/tex">T_{B}</script></li><li>功率谱：离散谱（若<script type="math/tex">v(t)=0</script>,则其离散谱不存在）<ul><li>m=0存在，有直流分量</li><li>m=1存在，即频谱在<script type="math/tex">f=f_{B}(T_{B}为码元宽度)</script>有冲激响应，有定时分量</li><li>单极性NRZ信号不存在定时分量</li><li>单极性归零波形有定时分量</li><li>双极性等概波形无直流分量，无定时分量</li></ul></li></ul></li><li>交变波：<ul><li>功率谱：连续谱，可以确定随机序列的带宽，总是存在</li></ul></li></ol><h3 id="基带传输的常用码型"><a href="#基带传输的常用码型" class="headerlink" title="基带传输的常用码型"></a>基带传输的常用码型</h3><ol><li><p>码型选择原则</p><ul><li>无直流分量，且低频分量小</li><li>定时信息丰富</li><li>高频分量小</li><li>不受信源统计特性的影响，适应信息源的变化</li><li>有自检能力</li><li>编、译码简单</li></ul></li><li><p>AMI：含义：传号交替反转码，1（传号）交替变化为+1，-1，0（空号）保持不变</p></li><li><p>HDB3码编码：</p><ul><li>连“0”个数不超过3个时，遵循AMI的编码规则</li><li>连“0”个数超过3个时，将第4个“0”改为非“0”脉冲，记为V+或V-，称为破坏脉冲</li><li>相邻V码的极性必须交替出现（确保无直流）</li><li>V码的极性应与前一个非“0”脉冲的极性相同，否则将0000更改为B+00V+ 或 B-00V- 。B称为调节脉冲</li><li>V码之后的传号码极性也要交替</li></ul></li><li><p>HDB3码译码：检查破坏脉冲，找到V码，把V码及前3位标成0000，之后把其他非零码还原成1，0还原为0</p></li><li>CMI码：传号反转码，1为11，00交替，0为01</li></ol><h3 id="数字基带信号传输"><a href="#数字基带信号传输" class="headerlink" title="数字基带信号传输"></a>数字基带信号传输</h3><ol><li><p>误码原因：</p><ul><li>信道加性噪声</li><li>码间串扰（ISI）：系统传输总特性不理想，使前面波形出现很长拖尾，蔓延到当前码元抽样时刻，对当前码元判决造成干扰</li></ul></li><li><p>无码间串扰条件：</p><ul><li>时域条件：h(t)抽样值除了在t=0时不为0，其他所有抽样点都为0</li><li>频域条件:<script type="math/tex">\left\{\begin{matrix}\sum_{i}H(\omega +\frac{2\pi i}{T_{B} } )=T_{B}\cdot C ,\left | \omega \right |\le    \frac{\pi }{T_{B} }   \\h(0)=C\end{matrix}\right.</script></li></ul></li><li><p>双极性信号抗噪声性能优于单极性信号</p></li><li>部分响应系统：<ul><li>频带利用率高（2Baud/Hz）</li><li>波形尾巴振荡衰减加快</li></ul></li><li>相关编码（人为引入码间串扰）：会带来差错传播 模2加</li><li>预编码：避免差错传播</li><li>时域均衡：在接收滤波器后加一个均衡器，减少码间串扰</li></ol>              </div>            </details><h2 id="数字带通传输系统"><a href="#数字带通传输系统" class="headerlink" title="数字带通传输系统"></a>数字带通传输系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <div class="note info flat"><p><a href="https://blog.csdn.net/weixin_45555522/article/details/122345162">关于包络起伏</a></p></div><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>数字调制：用数字基带信号（调制信号）控制载波某个参数的过程</li><li>数字键控法（数字调制技术）：利用数字信号的离散取值特点通过开关键控载波<ul><li>振幅键控（ASK,Amplitude Shift Keying）,对于二进制数字基带信号，1有载波，0无载波</li><li>频移键控(FSK)：载波有两种频率</li><li>相移键控(PSK)，1载波，0载波Π相突变</li></ul></li><li>全波整流器：信号时域取绝对值，此时信号中含有交流分量和直流分量，若再通过低通滤波器，可滤除高频交流分量，留下接近直流的部分</li><li>包络检波器：全波整流+低通滤波器</li><li>2ASK/OOK:二进制数字基带单极性信号，有直流分量，即有离散谱，在f=0有冲激响应<ul><li>相干解调（同步检测）：通过低通滤波器后乘个同频同相载波，效果和通过全波整流器一样</li><li>非相干解调（包络检波）：通过带通滤波器（减少噪声），全波整流器（信号时域取绝对值），低通滤波器（留下直流成分）</li></ul></li><li>2FSK:两个单极性信号，有离散谱</li><li>2PSK:双极性信号，等概时无离散谱<ul><li>缺点：载波恢复过程中存在相位模糊</li></ul></li><li>2DPSK：二进制差分相移键控，先进行差分编码，将绝对码转换成相对码，再进行2PSK<ul><li>相干解调（同步检测）</li><li>非相干解调（差分相干解调，相位比较法）：收到的2DPSK信号延时一个码元间隔，再与2DPSK信号相乘，经低通滤波器后抽样判决，</li></ul></li><li>多进制数字调制系统可以提高频带利用率（有效性），传信率相同，带宽变小<br>误码率增大（判决范围变小），若需保证一定误码率，发射功率要增大</li><li>4PSK也叫QPSK：正交相移键控<ul><li>缺点：最大相位跳变180°</li></ul></li><li>OQPSK:偏置QPSK，Offset QPSK<ul><li>最大相位跳变90°，未根本解决包络起伏问题</li></ul></li></ol><h3 id="抗噪声性能"><a href="#抗噪声性能" class="headerlink" title="抗噪声性能"></a>抗噪声性能</h3><ol><li>非相干解调（包络检波）：发“1”的抽样值服从广义瑞利分布，发“0”抽样值服从瑞利分布<br>大信噪比，误码率记住</li><li>相同信噪比条件下，相干解调误码率更小，抗噪声性能更好，大信噪比时，两者性能相差不大</li><li>2DPSK相干解调，用到码反变换器，将相对码变成绝对码</li></ol>              </div>            </details><h2 id="新型数字带通调制技术"><a href="#新型数字带通调制技术" class="headerlink" title="新型数字带通调制技术"></a>新型数字带通调制技术</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <h3 id="正交振幅调制（QAM）"><a href="#正交振幅调制（QAM）" class="headerlink" title="正交振幅调制（QAM）"></a>正交振幅调制（QAM）</h3><ol><li><p>特点：</p><ul><li>振幅，相位联合键控，频率利用率高，抗噪声性能优于MPSK</li><li>在相同的发送功率条件下，16QAM比16PSK抗噪声性能强（两点之间最小距离（噪声容限）16QAM大，噪声容限越大，抗噪声性能就越强）</li></ul></li><li><p>QAM星座图除方型结构外，还有星型或其他结构</p></li><li><p><a href="https://baike.baidu.com/item/%E5%A4%9A%E5%BE%84%E8%A1%B0%E8%90%BD/5602857">多径衰落解释</a></p><ul><li>衰落：信号包络因传播有了起伏</li></ul></li></ol><ol><li><p>在多径衰落信道中，信号振幅和相位取值越多，受到的影响越大，因而星型比方型更具有吸引力<br>方型星座的QAM信号的产生与接收更易实现（两个正交矢量合成）</p><ul><li>星型16QAM:2种振幅值，8种相位</li><li>方型16QAM:3种振幅值，12种相位</li></ul></li><li><p>对于方型MQAM：利用两个同频正交载波在同一带宽内实现两路并行LASK信号传输</p></li><li><p>频率选择性衰落：不同的频率走相同的路径，衰落是不同的，所以叫选择性衰落<br><a href="https://blog.csdn.net/ddatalent/article/details/118198520">详解</a></p></li></ol><h3 id="最小移频键控（MSK）"><a href="#最小移频键控（MSK）" class="headerlink" title="最小移频键控（MSK）"></a>最小移频键控（MSK）</h3><ol><li><p>特点：</p><ul><li>包络恒定，相位连续，带宽最小，严格正交的2FSK信号</li><li>与QPSK和OQPSK（这俩功率谱密度一样）相比，MSK的谱密度更为集中，即旁瓣下降得更快，故对相邻频道的干扰较小（但主瓣带宽最大）。</li><li>当用匹配滤波器分别接收每个正交分量时，MSK信号的误比特率性能和2PSK、QPSK及OQPSK等的性能一样；<br>若把它当作FSK信号用相干解调法在每个码元持续时间TB内解调，则其性能将比2PSK信号的性能差3dB。 </li></ul></li><li><p>高斯最小频移键控(GMSK)：在进行MSK调制前将矩形信号脉冲通过高斯型低通滤波器，使信号功率谱密度更加集中，减小对邻道干扰，主瓣带宽第二大</p></li></ol><h3 id="正交频分复用（OFDM）"><a href="#正交频分复用（OFDM）" class="headerlink" title="正交频分复用（OFDM）"></a>正交频分复用（OFDM）</h3><ol><li><p>优点：</p><ul><li>抗多径传播和频率选择性衰落（OFDM同时有很多不同频率的子载波可以调制信号，所以就可以给用户选些信道好的子载波用）<br>子信道的信号带宽小于信道的相关带宽（相对时延远小于一个符号的时间，多路信号几乎是同时到达接收机，这种情况下多径不会造成符号间的干扰），每个子信道可看作平坦型衰落，</li><li>较高频谱利用率</li></ul></li><li><p>缺点：</p><ul><li>对信道产生的频率偏移和相位噪声敏感</li><li>信号峰值功率和平均功率比值大，降低射频功率放大器效率</li></ul></li></ol>              </div>            </details><h2 id="数字信号的最佳接收"><a href="#数字信号的最佳接收" class="headerlink" title="数字信号的最佳接收"></a>数字信号的最佳接收</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ol><li>确知数字信号的最佳接收：<ul><li>将接收到的信号分别与信源集合中的每一个在周期TB内进行互相关运算，哪个大判为信源集合中的哪一个，若先验概率不相等，还要加上加权因子W进行比较</li><li>先验概率相等时，误码率最大，且此时若噪声功率一定，误码率仅和两种码元波形差的能量有关，差别越大，误码率越小</li></ul></li></ol>              </div>            </details><h2 id="信源编码"><a href="#信源编码" class="headerlink" title="信源编码"></a>信源编码</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ol><li>周期信号的傅里叶变换：<script type="math/tex; mode=display">f_{T} (t)=\sum_{n=-\infty }^{\infty } F_{n} e^{jnw_{0} t}</script><script type="math/tex; mode=display">f_{T} (t)\Longleftrightarrow 2\pi \sum_{n=-\infty }^{\infty } F_{n} \delta (w-nw_{0} )</script><script type="math/tex; mode=display">F_{n} =\frac{1}{T}\int_{-\infty }^{\infty }  f(t)e^{-jnw_{0} t}</script></li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Matlab实现信号分析与处理</title>
      <link href="/posts/99e3a19.html"/>
      <url>/posts/99e3a19.html</url>
      
        <content type="html"><![CDATA[<h2 id="单位样本序列生成"><a href="#单位样本序列生成" class="headerlink" title="单位样本序列生成"></a>单位样本序列生成</h2><script type="math/tex; mode=display">\delta [n]=\left\{\begin{matrix}  1,& n=0\\  0,&n\ne 0\end{matrix}\right.</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 横坐标 -10 to 20</span></span><br><span class="line">n = <span class="number">-10</span>:<span class="number">20</span>;</span><br><span class="line"><span class="comment">% 纵坐标，与横坐标相对应</span></span><br><span class="line">x = [<span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">10</span>) <span class="number">1</span> <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">20</span>)];</span><br><span class="line"><span class="comment">% 生成图像</span></span><br><span class="line">stem(n,x);</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>);ylabel(<span class="string">&#x27;\delta[n]&#x27;</span>); </span><br></pre></td></tr></table></figure><h2 id="时域线性卷积"><a href="#时域线性卷积" class="headerlink" title="时域线性卷积"></a>时域线性卷积</h2><script type="math/tex; mode=display">y[n]=x[n]*h[n]=\sum_{k=-\infty}^{\infty}x[k]h[n-k]</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h = [<span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">-2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-4</span> <span class="number">0</span> <span class="number">3</span>];  <span class="comment">% 脉冲响应</span></span><br><span class="line">x = [<span class="number">1</span> <span class="number">-2</span> <span class="number">3</span> <span class="number">-4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>];      <span class="comment">% 输入信号</span></span><br><span class="line">y = conv(h,x);              <span class="comment">%h[n],x[n]都为有限长序列，且在线性时不变离散系统，求输出序列</span></span><br><span class="line">n = <span class="number">0</span>:<span class="number">14</span>;                   <span class="comment">%输出序列的时间维度，9+7-1</span></span><br><span class="line">stem(n,y);</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>); ylabel(<span class="string">&#x27;y[n]&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Output Obtained by Linear Convolution&#x27;</span>); grid;</span><br></pre></td></tr></table></figure><h2 id="周期矩形脉冲信号的指数形式傅里叶级数"><a href="#周期矩形脉冲信号的指数形式傅里叶级数" class="headerlink" title="周期矩形脉冲信号的指数形式傅里叶级数"></a>周期矩形脉冲信号的指数形式傅里叶级数</h2><script type="math/tex; mode=display">f(t)=\sum_{-\infty }^{\infty } F_{k} e^{jk\Omega _{0}t }</script><script type="math/tex; mode=display">F_{k} =\int_{-\frac{T}{2} }^{\frac{T}{2} } f(t)e^{-jk\Omega _{0} t} dt=\frac{A\tau }{T} Sa(\frac{k\Omega _{0} \tau }{2} )</script><script type="math/tex; mode=display">其中\Omega _{0} =\frac{2\pi }{T}</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="number">1</span>; </span><br><span class="line">tau=<span class="number">0.1</span>; <span class="comment">%脉冲宽度</span></span><br><span class="line">T=<span class="number">0.5</span>;  <span class="comment">%周期</span></span><br><span class="line">Omega_0 = <span class="number">2</span>*<span class="built_in">pi</span>/T;  <span class="comment">%基波频率</span></span><br><span class="line">K = <span class="number">2</span>*<span class="built_in">pi</span>/tau/Omega_0; <span class="comment">%%K=T/tau占空比的倒数，占空比：tau/T</span></span><br><span class="line">k= <span class="number">0</span>:<span class="number">2</span>*K;</span><br><span class="line">F_k = A*tau/T*sinc(k*Omega_0*tau/<span class="number">2</span>/<span class="built_in">pi</span>);  <span class="comment">% 系数F_k,Sa(x) = sin(x) / x,sinc(x) = Sa(pi * x)</span></span><br><span class="line">F_k_mag=<span class="built_in">abs</span>(F_k);      <span class="comment">%F_k的幅度</span></span><br><span class="line">F_k_phase = <span class="built_in">angle</span>(F_k);  <span class="comment">%F_k的相位</span></span><br><span class="line">k= <span class="number">-2</span>*K:<span class="number">2</span>*K;</span><br><span class="line">F_k_mag = [<span class="built_in">fliplr</span>(F_k_mag(<span class="number">2</span>:<span class="keyword">end</span>)) F_k_mag];</span><br><span class="line">F_k_phase = [ -<span class="built_in">fliplr</span>(F_k_phase(<span class="number">2</span>:<span class="keyword">end</span>)) F_k_phase];</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">stem(k*Omega_0, F_k_mag);</span><br><span class="line">xlabel(<span class="string">&#x27;k \Omega_o&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;magnitude&#x27;</span>);</span><br><span class="line">grid</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">stem(k*Omega_0, F_k_phase);</span><br><span class="line">xlabel(<span class="string">&#x27;k \Omega_o &#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;phase&#x27;</span>);</span><br><span class="line">grid</span><br></pre></td></tr></table></figure><h2 id="前N次谐波叠加得到的周期矩形脉冲信号近似波形"><a href="#前N次谐波叠加得到的周期矩形脉冲信号近似波形" class="headerlink" title="前N次谐波叠加得到的周期矩形脉冲信号近似波形"></a>前N次谐波叠加得到的周期矩形脉冲信号近似波形</h2><div class="note info flat"><p>吉布斯现象：将具有不连续点的周期函数（如矩形脉冲)进行傅立叶级数展开后，选取有限项进行合成。当选取的项数越多，在所合成的波形中出现的峰值越靠近原信号的不连续点。当选取的项数很大时，该峰值趋于一个常数</p></div><script type="math/tex; mode=display">f_{N} (t)=\frac{A\tau }{T} +\sum_{k=1}^{N} \frac{2A\tau }{T}Sa(k\Omega _{0} \frac{\tau }{2} ) cosk\Omega _{0} t</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t=<span class="number">-2</span>:<span class="number">10</span>^(<span class="number">-4</span>):<span class="number">2</span>; <span class="comment">%采样间隔,会影响是否能采样到f_N的最大值,可增加采样点数可以减小误差</span></span><br><span class="line">A=<span class="number">1</span>;</span><br><span class="line">tau=<span class="number">1</span>; <span class="comment">%脉冲宽度</span></span><br><span class="line">T=<span class="number">2</span>;  <span class="comment">%周期</span></span><br><span class="line">Omega_0 = <span class="number">2</span>*<span class="built_in">pi</span>/T;  <span class="comment">%基波频率</span></span><br><span class="line">c0=A*tau/T; </span><br><span class="line">N=input(<span class="string">&#x27;N=&#x27;</span>);</span><br><span class="line">f_N=c0*<span class="built_in">ones</span>(<span class="number">1</span>,<span class="built_in">length</span>(t));  <span class="comment">%f_N(t)</span></span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="number">1</span>:N  </span><br><span class="line">     f_N = f_N + <span class="number">2</span>*A*tau/T*sinc(k*Omega_0*tau/<span class="number">2</span>/<span class="built_in">pi</span>) *<span class="built_in">cos</span>(k*Omega_0*t);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot</span>(t, f_N);</span><br><span class="line">xlabel(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;f_N(t)&#x27;</span>);</span><br><span class="line">title([<span class="string">&#x27;N=&#x27;</span>,num2str(N)]) </span><br><span class="line">axis([<span class="number">-2</span> <span class="number">2</span> <span class="number">-0.2</span> <span class="number">1.2</span>]);</span><br></pre></td></tr></table></figure><h2 id="对采样频率Fs的长度为N的序列x求频谱"><a href="#对采样频率Fs的长度为N的序列x求频谱" class="headerlink" title="对采样频率Fs的长度为N的序列x求频谱"></a>对采样频率Fs的长度为N的序列x求频谱</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[X,f]</span> = <span class="title">ctft1</span><span class="params">(x,Fs,N)</span></span></span><br><span class="line">X=fftshift(fft(x,N))/Fs;</span><br><span class="line">f=-Fs/<span class="number">2</span>+(<span class="number">0</span>:N<span class="number">-1</span>)*Fs/N;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="音频录制及存储"><a href="#音频录制及存储" class="headerlink" title="音频录制及存储"></a>音频录制及存储</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%------ 录制自己的语音</span></span><br><span class="line"><span class="comment">%创建一个保存音频信息的对象，包含采样率，时间和录制的音频信息。44100表示采样为44100Hz（可改为8000，11025，22050等，采样频率越高，录入的声音质量越好，相应需要的存储空间越大），16为用16bits存储，1为单声道，也可以改为2表示两通道）</span></span><br><span class="line">R=audiorecorder(<span class="number">44100</span>,<span class="number">16</span>,<span class="number">1</span>); <span class="comment">%audiorecorder 创建一个 8000 Hz、8 位、1 声道的audiorecorder 对象。将返回对象的句柄。</span></span><br><span class="line">record(R);<span class="comment">%开始录制，在指令窗输入此指令后，对着麦克风说话，即可进行录制</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;Start speaking.&#x27;</span>)</span><br><span class="line"><span class="comment">%录制者说一句话，说完后输入下面指令</span></span><br><span class="line">pause(R);<span class="comment">%暂停录制</span></span><br><span class="line">play(R); <span class="comment">% 播放录制的声音</span></span><br><span class="line"><span class="comment">%resume(R);%如果需要的话可以继续录制</span></span><br><span class="line"><span class="comment">%stop(R);%停止录制，录制结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%------ 画出语音的时域波形</span></span><br><span class="line">myspeech=getaudiodata(R);<span class="comment">%得到刚录制的音频信号矢量,getaudiodata获取 audiorecorder 对象中录制的音频数据,将录制的音频数据作为双精度数组</span></span><br><span class="line">返回</span><br><span class="line"><span class="built_in">plot</span>(myspeech);<span class="comment">%画出语音波形</span></span><br><span class="line">xlabel(<span class="string">&#x27;时域样值&#x27;</span>),ylabel(<span class="string">&#x27;幅度&#x27;</span>),title(<span class="string">&#x27;语音波形&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%-----写入和读取声音文件</span></span><br><span class="line"><span class="comment">%myspeech.wav:音频文件完整的路径</span></span><br><span class="line">audiowrite(<span class="string">&#x27;myspeech.wav&#x27;</span>,myspeech,<span class="number">44100</span>);<span class="comment">%语音存储</span></span><br><span class="line"><span class="comment">%audiowrite（Y，Fs，NBITS，WAVEFILE） 将数据 Y写入由文件名 WAVEFILE 指定的windows wave文件。 windows wave文件具有采样率 FS Hz 和 NBITS 位数。 NBITS 必须为 8、16、24 或 32,Y=audioread（FILE） 读取由字符串 FILE 指定的 WAVE 文</span></span><br><span class="line">件，以 Y 格式返回采样数据</span><br><span class="line">[x,Fs]=audioread(<span class="string">&#x27;myspeech.wav&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%-----计算并画出语音信号的幅度频谱</span></span><br><span class="line">N=<span class="built_in">length</span>(x);</span><br><span class="line">[X,f]=ctft1(x,Fs,N);</span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(f,<span class="built_in">abs</span>(X)/<span class="built_in">max</span>(<span class="built_in">abs</span>(X)));</span><br><span class="line">xlabel(<span class="string">&#x27;频率(Hz)&#x27;</span>),ylabel(<span class="string">&#x27;幅度谱&#x27;</span>),title(<span class="string">&#x27;语音幅度谱&#x27;</span>);</span><br><span class="line">axis([<span class="number">0</span>,<span class="number">5000</span>,<span class="number">0</span>,<span class="number">1</span>]);grid    <span class="comment">% 当只观察0~5000Hz内的频谱</span></span><br></pre></td></tr></table></figure><h2 id="DFT与IDFT"><a href="#DFT与IDFT" class="headerlink" title="DFT与IDFT"></a>DFT与IDFT</h2><script type="math/tex; mode=display">X[k]=\sum_{n=0}^{N-1} x[n]W_{N}^{kn} ,0\le k\le N-1 ,W_{N} =e^{-j\frac{2\pi }{N} }</script><script type="math/tex; mode=display">x[n]=\frac{1}{N} \sum_{k=0}^{N-1} X[k]W_{N}^{-kn} ,0\le k\le N-1 ,W_{N} =e^{-j\frac{2\pi }{N} }</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">L=<span class="built_in">length</span>(x);  </span><br><span class="line">N=L;      <span class="comment">% set samples number in frequency domain</span></span><br><span class="line">w=<span class="number">2</span>*<span class="built_in">pi</span>/N*(<span class="number">0</span>:N<span class="number">-1</span>);    <span class="comment">%  discrete frequency</span></span><br><span class="line"><span class="comment">%DFT</span></span><br><span class="line">Xw=<span class="built_in">zeros</span>(<span class="number">1</span>,N);  <span class="comment">% vector for storing DFT </span></span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:N     </span><br><span class="line">     Xw(k)=x*(<span class="built_in">exp</span>(-<span class="built_in">j</span>*w(k)*(<span class="number">0</span>:L<span class="number">-1</span>)&#x27;));  </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">%IDFT</span></span><br><span class="line">y=<span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:N</span><br><span class="line">y(n)=(<span class="number">1</span>/N)*Xw* (<span class="built_in">exp</span>(<span class="built_in">j</span>*(n<span class="number">-1</span>)*w&#x27;)); </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="圆周移位"><a href="#圆周移位" class="headerlink" title="圆周移位"></a>圆周移位</h2><script type="math/tex; mode=display">h[\left \langle n-m \right \rangle _{N} ]</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">cirshift</span><span class="params">(x,M)</span>   % <span class="title">M</span>为序列圆周移位的样本数</span></span><br><span class="line"><span class="comment">%程序对一个有限长序列x圆周移位M个采样间隔得到新序列y</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">abs</span>(M)&gt;<span class="built_in">length</span>(x)</span><br><span class="line">   M=<span class="built_in">rem</span>(M,<span class="built_in">length</span>(x));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> M&lt;<span class="number">0</span></span><br><span class="line">   M=M+<span class="built_in">length</span>(x);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y=[x(M+<span class="number">1</span>:<span class="built_in">length</span>(x)) x(<span class="number">1</span>:M)];</span><br></pre></td></tr></table></figure><h2 id="圆周卷积"><a href="#圆周卷积" class="headerlink" title="圆周卷积"></a>圆周卷积</h2><script type="math/tex; mode=display">y_{c} [n]=\sum_{m=0}^{N-1} g[m]h[\left \langle n-m \right \rangle _{N} ],0\le n\le N-1</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">circonv</span><span class="params">(x1,x2)</span>;</span></span><br><span class="line">L1=<span class="built_in">length</span>(x1);</span><br><span class="line">L2=<span class="built_in">length</span>(x2);</span><br><span class="line"><span class="keyword">if</span> L1 ~=L2</span><br><span class="line">  error(<span class="string">&#x27;Sequences of unequal lengths&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y=<span class="built_in">zeros</span>(<span class="number">1</span>,L1);</span><br><span class="line">x2tr=[x2(<span class="number">1</span>) x2(L2:<span class="number">-1</span>:<span class="number">2</span>)];</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:L1</span><br><span class="line">   sh=cirshift(x2tr,<span class="number">1</span>-k);</span><br><span class="line">   h=x1.*sh;</span><br><span class="line">   y(k)=sum(h);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="圆周卷积求线性卷积（时域）"><a href="#圆周卷积求线性卷积（时域）" class="headerlink" title="圆周卷积求线性卷积（时域）"></a>圆周卷积求线性卷积（时域）</h2><ul><li>条件：圆周卷积的长度大于线性卷积长度</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">g1 = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>];g2 = [<span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>];</span><br><span class="line">g1e = [g1 <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(g2)<span class="number">-1</span>)];</span><br><span class="line">g2e = [g2 <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(g1)<span class="number">-1</span>)];</span><br><span class="line">ylin = circonv(g1e,g2e);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;Linear convolution via circular convolution = &#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(ylin);</span><br><span class="line">y = conv(g1, g2);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;Direct linear convolution = &#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(y)</span><br></pre></td></tr></table></figure><h2 id="圆周卷积求线性卷积（频域，DFT）"><a href="#圆周卷积求线性卷积（频域，DFT）" class="headerlink" title="圆周卷积求线性卷积（频域，DFT）"></a>圆周卷积求线性卷积（频域，DFT）</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g1 = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>];g2 = [<span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>];</span><br><span class="line">g1e = [g1 <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(g2)<span class="number">-1</span>)];</span><br><span class="line">g2e = [g2 <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="built_in">length</span>(g1)<span class="number">-1</span>)];</span><br><span class="line">G1=fft(g1e);</span><br><span class="line">G2=fft(g2e);</span><br><span class="line">ylin=ifft(G1.*G2);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;Linear convolution via circular convolution = &#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(ylin);</span><br><span class="line">y = conv(g1, g2);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;Direct linear convolution = &#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(y)</span><br></pre></td></tr></table></figure><h2 id="频率响应"><a href="#频率响应" class="headerlink" title="频率响应"></a>频率响应</h2><div class="note info flat"><p>系统的零状态响应的傅里叶变换与输入信号的傅里叶变换之比</p></div><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">H=freqs(b,a,w);</span><br><span class="line"><span class="comment">%b和a分别为分子多项式和分母多项式的系数向量；w为系统频率响应的频率范围的向量，如w1: dw: w2形式，w1为频率的起点，w2为频率的终点，dw为频率的采样间隔；H为系统频率响应的样值</span></span><br><span class="line">[H,w]=freqs(b,a);</span><br><span class="line"><span class="comment">%输出从计算出的频率响应中自动选取200个频率点的频率响应的样值，其中b和a同上；H为保存200个频率点的系统频率响应的样值，w为保存200个频率点的位置</span></span><br><span class="line">[H,w]=freqs(b,a,N);</span><br><span class="line">输出从计算出的频率响应中自动选取N个频率点的频率响应的样值，其中b和a同上；N为频率点的个数；H为保存N个频率点的系统频率响应的样值，w为保存N个频率点的位置</span><br><span class="line">freqs(b,a);</span><br><span class="line"><span class="comment">%以伯德图的方式绘制出系统的频率响应曲线，并不返回系统频率响应的样值</span></span><br></pre></td></tr></table></figure><h2 id="已知频率响应求冲激响应h-t"><a href="#已知频率响应求冲激响应h-t" class="headerlink" title="已知频率响应求冲激响应h(t)"></a>已知频率响应求冲激响应h(t)</h2><script type="math/tex; mode=display">h(t)=\frac{1}{2\pi } \int_{-\infty }^{\infty } H(j\Omega )e^{j\Omega t} d\Omega</script>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔（一）</title>
      <link href="/posts/f3607a0c.html"/>
      <url>/posts/f3607a0c.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e14d8d067c939fe9647802da039010ac5862c73664355c5eb1198dd6da683f86">c445289720f713ac53d557b8e3669f2f1fd553a8a88904658f59fbe1497f5fdc503c48dc2a3505be13a88a255b2060547e82b9ab7585ff4c0bbf5813b3d3d23badf1d5f28810401ad436919daceb59706d0a19f8b544a75b761c5b5a28732b75d7fb854cd81be06d07d934a38fdf9ca5369b2aaa4130b16e1789b70812095bd65025c67c5095d9696e37c88fa8432ebc659dc83acc35a8eff81e5dc81ede3d0c7a319d0ee50ccb7d37c99ab2531408cf11e4fee646faa1f6113f49395de0805b1458ce429b622b8126604dc9f1c47444c15e99e5971dc73416f2643a319c7ddf3839680ab1563a840afe129315ee90a614ae8ba8fd5f4dd4807fa738c48747b5cff91e0d44871425327b66259840e731e10b4ed5bbe34ce58fbcc7563fd83da558f4ec4723117b1c613ce08e00af6b871fde4d453ef1d85caec92ea814032f95c159fe133c47f1de52c6ea0181e7a4e42feb2ed83c390da414ed3c504311a85800d5d7b1769d0e055044889652bc60e5f2c8d799612058e8d1bb55901496bd5f67c7c55e8995058bf6ff5e2bcd3ff0367c607a53e96e91e9c89fa8d5f538cc520f8ed5e77d85a9749ca22c4af08b9bcf32c1a129603d3500183f5a5d8f2c57acb8e95588433aa1dddb966de4cd8467287e6ae3de53b2f1e05450e005c438e2e8a89c89a05dabaed88136f3adb18257274d154b9d714fc7f5e9e9557b73d3db3d082aaa74112c806574385865266387dd50b5fd7b9ed6c0f005cef7e0f71eb563f87c87afb0996cc7a02bbf655c2f01671659bdd3ae6439e5a5a271079a8a9b9e44e3fec64c84a74fc4133ffc85e3cacc32050b36ad4a744c0c664e0544b5ba8c66915e01d1857269dad4f400e3fb46fcedefa9ba85505069cd86cc8a8cdc94201c26e9722e4cf6da2150a36ed0b9391deb9d02ca0a048dcfee9ba9cf4afe6690d88868bc587bf47140d55d6d3aae8079a7d9f2f7a667d6a1a497f043afd71e1cd2dc1ae54bce6ec4cb5eb8d4acdd57ea034f7b6afadedb2ec92a0a5d8b4109d7900d7398eb8405fc25340ee08a4bb35c5db06c9c5e1e13ac75e326c3c876d7149bc51f7b9154ad2d02c8c2db6f7921b0d8a44e2a90555fbde834e2250e22853578ba2a121278ae70829fed2fa59a5c9161c41c2f6e63154b2dfc37c2eb4b3d6642db1fabe2e58de9160df33e7dba9e0ab350773b9e2819fdd553612ef3b9d9b1f0e7c53a58c961c62e8e72a913f47cc093ffccc3356352d387a35e82c839336f92c9f75f129995eaafb288d60700f4e790d6bd80286d37e9755de7c6b36ae38ee6ad1c0763f8ab90fabb1a23931c6c9d4a08b9b60e3b67a737b28dff0c094f0f5e94ae460a875ee77c8930ff604e0eb2739ff6ce52748eedef8cec72b2de470af41d74a3f4088e29bf9885ff66be3fa9b4d7160aa3cf7dac8b3b86cf0c9bdca7ad9603f6fe2da00fbddc4c909e4f2ff5b51d6a18db68b9d721b531f5a8a75736c8807dce8676c61c57aa34d459d8f9e32b57faf0ccfaabd8f4fef3c1571c26fff1e17d70e4d07d0a899ff1241289a81b620070d7995d9907e84f7f10f97c01cb3d87875961d632dd45a10a2edd9617087daaf2d85dbc7b932f4990ddc73eef6e055fcd56c1f2629d176ef351078a7feeb4db5ada0ed98387b09e263a87e790f2ec1274f1e2a57d4eecc1f7c359349ab2fce43edcf5feb607165d3fa0174c0fc1fc81714ef77ac28bd23195ab64f9ea4a00f3e5eeb451d230ce7967d1053d4abb378808f02629672c2b31e2c0146c76373a59bbd97d5e52654d64b263cf348d308fcd326b16ea07e968cec30d678050f2536f1df797c5a2e299e126b4f778502bed8b5a367e28eaf94d47b50117e4eaf85982bc30c07a1e03a16a33698c421c39a866cd33dff2f4612ed6b6cd97a9b44c01547277306c165a6303660b8e9e80578f5456ff8eb622c5c14565f037a0e6ed28210f6e8bcb4299bf3dcd9668e200fdfa32c899452751f48a77b6581b745074a1e6af35c98d97c7df69977335477f0dcce16c2d8c6612a8410f2ce701a5ae517128f794f79488eda0ffddc489a042e8501f4f3fa40c8bbf56e10b288d6432048b4cf2a4d273b0c6ec7ac663268267c6b95dc0adfea8275097725e3c0c0139f13cd298ea2be179d00ad9a6bcbb3c046f64ebfbd5e733abe8ca0bcd1cac63e390a9581acaea4a559abfb2ec1a84248f1482641c410ad8ec8d1e18d4c5c1a63b9c0a0e3090aadd7c172be555541eb1accc3197cb5dc1464c06307d9633a4d130a3f7dfaacd30d33e2c2488228dcfa5533fe445a0b7caf0a7cfa87bc3cf666c44c1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSP</title>
      <link href="/posts/722fa36d.html"/>
      <url>/posts/722fa36d.html</url>
      
        <content type="html"><![CDATA[<h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><details class="folding-tag" grey><summary> Signals and Signal Processing </summary>              <div class='content'>              <h3 id="Characterization-and-Classification-of-Signals-信号的特征与分类"><a href="#Characterization-and-Classification-of-Signals-信号的特征与分类" class="headerlink" title="Characterization and Classification of Signals(信号的特征与分类)"></a>Characterization and Classification of Signals(信号的特征与分类)</h3><ol><li>分类依据：<ul><li>the nature of independent variables(独立变量的性质)</li><li>the value of the function(函数的值)</li></ul></li><li>根据自变量个数分：<ul><li>1-D signal(一维信号):一个自变量的函数，如语音信号</li><li>M-D signal(多维信号)：多个自变量的函数，如图像信号（二维）、视频信号（三维）</li></ul></li><li>根据源的个数分：<ul><li>scalar signal(标量信号)：单个源,如单通道音频信号</li><li>vector signal or multichannel signal(向量信号或多通道信号):多个源,如彩色视频信号、多通道脑电波信号</li></ul></li><li>根据时间自变量和振幅的连续性分:<ul><li>continuous-time signal连续时间信号:自变量连续取值<ul><li>analog signal模拟信号（amplitude<strong>振幅</strong>连续）</li><li>quantized boxcar signal量化矩形信号（振幅离散）</li></ul></li><li>discrete-time signal离散时间信号：自变量离散取值<ul><li>digital signal数字信号（振幅离散）</li><li>sampled-data signal采样数据信号（振幅连续 ）</li></ul></li></ul></li><li>function of the indepenent variables(关于独立变量的函数)<ul><li>continuous(连续函数)</li><li>discrete(离散函数)</li><li>real(实值函数)</li><li>complex(复值函数)</li></ul></li><li>是否有惟一确定的描述<ul><li>deterministic signal(确定性信号)</li><li>random signal(随机信号)</li></ul></li></ol><h4 id="数字信号"><a href="#数字信号" class="headerlink" title="数字信号"></a>数字信号</h4><ol><li>定义：可用一串数表示，每个数又可表示为有限位二进制码</li><li>用途：可在数字存储设备上存储，且适合计算机处理</li><li>应用：数字化音乐信号、数字化语音信号、由数码相机或扫描仪等生成的数码影像</li></ol>              </div>            </details><h2 id="离散时间信号的时域分析"><a href="#离散时间信号的时域分析" class="headerlink" title="离散时间信号的时域分析"></a>离散时间信号的时域分析</h2><details class="folding-tag" grey><summary> Discrete-Time Signals in the Time Domain </summary>              <div class='content'>              <h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="Time-Domain-Representation-时域表示"><a href="#Time-Domain-Representation-时域表示" class="headerlink" title="Time-Domain Representation(时域表示)"></a>Time-Domain Representation(时域表示)</h4><ol><li>序列的时间维度：<ul><li>finite-length sequence(有限长序列):<br>可通过补零(zero-padding)增加序列长度</li><li>infinite-length sequence(无限长序列)：<br>right-sided sequence( 右边序列，N &lt; N1,x[n]=0)，特殊情况为causal sequence(因果序列，N1≥0)<br>left-sided sequence(左边序列，N &gt; N2,x[n]=0)，特殊情况为anti-causal sequence(反因果序列，N2≤0)<br>two-sided sequence(双边序列，有限个0)</li></ul></li><li>序列的振幅值维度：<ul><li>complex conjugate sequence(复共轭序列)：实部(real parts)相同，虚部(imaginary parts)互为相反数</li></ul></li><li>序列的长度即为数的个数</li></ol><h4 id="Operations-on-Sequences-序列运算"><a href="#Operations-on-Sequences-序列运算" class="headerlink" title="Operations on Sequences(序列运算)"></a>Operations on Sequences(序列运算)</h4><ol><li>不等长序列的基本运算(Elementary  Operations)：补零，并使时间对齐</li><li>具体序列的卷积和（ Convolution Sum）计算方法：<ul><li>反转滑动(flip-and-slide)</li><li>卷积计算的解析式法<script type="math/tex; mode=display">y[n]=x[n]*h[n]=\sum_{k=-\infty}^{\infty}x[k]h[n-k]</script></li></ul></li><li>两个序列卷积得到的新序列长度为N+M-1</li></ol><h4 id="Operations-on-Finite-Length-Sequences-有限长序列运算"><a href="#Operations-on-Finite-Length-Sequences-有限长序列运算" class="headerlink" title="Operations on Finite-Length Sequences(有限长序列运算)"></a>Operations on Finite-Length Sequences(有限长序列运算)</h4><ol><li>modulo operation(模运算): ${&lt; m &gt;}_{N}$</li><li>对于有限长序列运算，有限长序列的时间范围限定在0≤n≤N-1</li><li>有限长序列运算:<ul><li>Circular Time-shift Operation(循环时移运算)： $x[{&lt; n-n0 &gt;}_{N}]$</li><li>Circular Time-Reversal Operation(循环反转运算):  $x[{&lt; -n &gt;}_{N}]$</li></ul></li><li>本质：把有限长序列看作是一个周期序列的一个周期，有限长序列运算可以看作是对周期序列时移再取主值周期这样一个过程</li></ol><h4 id="Typical-Sequences-and-Sequence-Representation-典型序列与序列表示"><a href="#Typical-Sequences-and-Sequence-Representation-典型序列与序列表示" class="headerlink" title="Typical Sequences and Sequence Representation(典型序列与序列表示)"></a>Typical Sequences and Sequence Representation(典型序列与序列表示)</h4><ol><li>共轭（*）即对虚部取反</li><li>Conjugate-symmetric sequence(共轭对称序列)：x[n]=x*[-n],即在序列中，距0时刻序列相同距离，实部相同，虚部相反<ul><li>如果x[n]只有实部，x[n]=x[-n],x[n]为even sequence(偶序列)</li></ul></li><li>Conjugate-antisymmetric sequence(共轭反对称序列):x[n]=-x*[-n]，即距0相同距离，实部相反，虚部相同<ul><li>如果x[n]只有实部，x[n]=-x[-n],x[n]为odd sequence(奇序列)</li></ul></li><li>任意序列都能求出其共轭对称部分或共轭反对称部分<script type="math/tex; mode=display">x[n]=x_{cs}[n]+x_{ca}[n]</script><script type="math/tex; mode=display">x_{cs}[n]=\frac{1}{2}(x[n]+x^{*}[-n]) \qquad 共轭对称部分</script><script type="math/tex; mode=display">x_{ca}[n]=\frac{1}{2}(x[n]-x^{*}[-n]) \qquad 共轭反对称部分</script></li><li>基本序列：<ul><li>Unit sample sequence(单位采样序列)：δ(n)</li><li>Unit step sequence(单位阶跃序列)：μ(n)</li><li>正弦序列的周期性：满足 $w_{0}N=2{\pi}r$（N和r都是整数）<ul><li>实正弦序列</li><li>复正弦序列</li></ul></li></ul></li><li>四种频率形式：<div class="fj-gallery"><p><img src="https://s2.loli.net/2023/02/21/A8GsHcnVMvlUQuq.jpg" alt=""><br><img src="https://s2.loli.net/2023/02/21/LaeWhxKGQqEYDm1.jpg" alt=""></p>       </div></li><li>两个不同频率的正弦序列，经过采样后产生相同的正弦序列条件：频率(正负频率)相差采样频率整数倍</li><li>采样后得到的离散时间正弦序列不发生混肴(aliasing)的条件： <script type="math/tex; mode=display">采样频率Ω_{T}＞2Ω_{0}(弧度频率)</script></li></ol><h3 id="习题小结"><a href="#习题小结" class="headerlink" title="习题小结"></a>习题小结</h3><ol><li>两个有限长序列(a≤n≤b,c≤n≤d)卷积，卷积和范围为a+c≤n≤b+d</li><li>δ[n-m]*δ[n-r]=δ[n-m-r]</li></ol>              </div>            </details><h2 id="离散时间信号的频域分析"><a href="#离散时间信号的频域分析" class="headerlink" title="离散时间信号的频域分析"></a>离散时间信号的频域分析</h2><details class="folding-tag" grey><summary> Discrete-Time Signals in the Frequency-Domain </summary>              <div class='content'>              <h3 id="CTFT"><a href="#CTFT" class="headerlink" title="CTFT"></a>CTFT</h3><ol><li>对于周期信号的频谱，本质是通过指数形式的傅里叶展开，系数 <script type="math/tex">F_{n}</script> 即为频谱，是复指数，随kΩ变换<br>从频域(jkΩ)的维度来看(Ω为2Π/T),频谱离散,研究的其实是不同的kΩ下, <script type="math/tex">F_{n}</script> 的幅度以及相位<br>连续时间的周期信号 $f_{T}(t)$ 的指数形式傅里叶级数：<script type="math/tex; mode=display">f_{T}(t) =\sum_{k=-\infty }^{\infty} F_{n} e^{jk\Omega t}</script><script type="math/tex; mode=display">F_{n} =\frac{1}{T}\int_{-\frac{T}{2} }^{\frac{T}{2} }  f_{T} (t)e^{-jk\Omega t}</script></li><li>对于非周期信号的频谱，实际是频谱密度函数<script type="math/tex">F(j\Omega)= F_{n}T</script>，可看作其周期T无限大，Ω趋于0,即频域连续<br>从频域(jΩ)的维度来看,频域连续,研究的F(jΩ)的幅度及相位，傅里叶反变换 ，本质上依旧是f(t)的傅里叶指数形式展开，将系数 <script type="math/tex">F_{n}</script>变成 <script type="math/tex">\frac{F(j\Omega)}{2\pi}dΩ</script>（因为Ω无限小），求和变为积分<br>模拟信号(analog signal,时间连续，振幅连续，一般指非周期信号)的傅里叶变换及其反变换：<script type="math/tex; mode=display">F_{a} (j\Omega )=\int_{-\infty}^{\infty }f(t)e^{-j\Omega t} dt</script><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi } \int_{-\infty }^{\infty } F(j\Omega )e^{j\Omega t} d\Omega</script></li><li>结论：<br>时域周期，对应频域离散<br>时域非周期，对应频域连续</li><li>思想：傅里叶变换是一种信号分解的思想，在CTFT中，分解的基信号是<script type="math/tex">e^{j\Omega t}</script></li></ol><h3 id="DTFT"><a href="#DTFT" class="headerlink" title="DTFT"></a>DTFT</h3><ol><li>定义式：<script type="math/tex; mode=display">X(e^{j\omega } )=\sum_{n=-\infty }^{\infty } x[n]e^{-j\omega n}</script><script type="math/tex; mode=display">x[n]=\frac{1}{2\pi } \int_{-\pi }^{\pi } X(e^{j\omega } )e^{j\omega n} d\omega</script></li><li><script type="math/tex">X(e^{j\omega } )</script>是关于ω的连续，周期(2Π)函数</li><li>$X(e^{j\omega } )$是复数，因为有<script type="math/tex">e^{j\omega }</script><ul><li>极坐标：<script type="math/tex">X(e^{j\omega } )=\left |X(e^{j\omega } )  \right | e^{j\theta (\omega )}</script><ul><li>幅度谱(magnitude spectra)：<script type="math/tex">\left |X(e^{j\omega } )  \right |</script><br>x[n]实数，幅度谱偶对称</li><li>相位谱：<script type="math/tex">\theta (\omega )=arg\left \{ X(e^{j\omega } ) \right \}</script><br>不唯一，主值(principal vlaue)区间：<script type="math/tex">-\pi 到 \pi</script><br>x[n]实数，相位谱奇对称</li></ul></li><li>实部+虚部<ul><li>x[n]实数，谱实部偶对称，虚部奇对称</li></ul></li></ul></li><li><p>x[n]为实数：</p><div class="fj-gallery"><p><img src="https://s2.loli.net/2023/05/14/DKmhUaTx59dzurX.jpg" alt=""></p>       </div><ul><li>x[n]偶函数，谱是实数</li><li>x[n]奇函数，谱是虚数</li></ul></li><li><p>x[n]为复数：</p><div class="fj-gallery"><p><img src="https://s2.loli.net/2023/05/14/QX9Vmd4Mop27RtU.jpg" alt=""></p>       </div></li><li><p>信号时域能量等于信号频域能量</p><script type="math/tex; mode=display">\int_{-\pi }^{\pi } \left | X(e^{j\omega } ) \right | ^{2} d\omega =2\pi \sum_{n=-\infty }^{\infty }\left | x[n] \right | ^{2}</script></li></ol><h4 id="CTFT与DTFT的关系"><a href="#CTFT与DTFT的关系" class="headerlink" title="CTFT与DTFT的关系"></a>CTFT与DTFT的关系</h4><ol><li>结论：<script type="math/tex; mode=display">G(e^{jw})=\frac{1}{T}\sum_{k=-\infty}^{\infty}G_{a}(j(\Omega-k\Omega_{T}))|_{\Omega =\frac{\omega }{T} ,\Omega _{T} =\frac{2\pi }{T} }</script>即对一个连续时间信号f(t)以采样周期T采样得到的离散序列x[n]的DTFT是f(t)的CTFT进行移位，缩放(scale)得到的</li></ol><h4 id="Recovery-of-the-Analog-Signal-模拟信号的恢复"><a href="#Recovery-of-the-Analog-Signal-模拟信号的恢复" class="headerlink" title="Recovery of the Analog Signal(模拟信号的恢复)"></a>Recovery of the Analog Signal(模拟信号的恢复)</h4><p><img src="https://s2.loli.net/2023/03/04/9VKHYo5cjkeqLlP.jpg" alt=""></p><ol><li>Anti-aliasing prefilter(抗混叠前置滤波)<ul><li>作用:避免混叠效应的不利影响</li><li>原理：模拟低通滤波器,截止频率 $\Omega_{T}/2$,通带范围: <script type="math/tex; mode=display">[-\frac{\Omega_{T}}{2}，\frac{\Omega_{T}}{2} ]</script></li></ul></li><li>S/H(采样保持电路)<ul><li>作用：模数转换需要一定的时间，确保A/D的模拟信号幅值恒定</li></ul></li><li>analog-to-digital(A/D,模数转换器)</li><li>digital-to-analog (D/A,数模转换器)</li><li>Reconstruction  fliter(重建滤波器)<ul><li>低通滤波器</li></ul></li><li>采样定理(Sampling theorem)<script type="math/tex; mode=display">\Omega_{T}≥2\Omega_{m}</script>满足采样定理，频谱不混淆，才能正确恢复模拟信号</li></ol>              </div>            </details><h2 id="离散时间系统"><a href="#离散时间系统" class="headerlink" title="离散时间系统"></a>离散时间系统</h2><details class="folding-tag" grey><summary> Discrete-Time Systems </summary>              <div class='content'>              <h3 id="系统时域分析"><a href="#系统时域分析" class="headerlink" title="系统时域分析"></a>系统时域分析</h3><h4 id="离散时间系统举例"><a href="#离散时间系统举例" class="headerlink" title="离散时间系统举例"></a>离散时间系统举例</h4><ol><li>累加器(Accumulator):y[n]=y[n-1]+x[n]<ul><li>作用：将当前以及当前时刻之前的所有输入样本进行累加，可视为连续时间积分器的离散时间等效</li></ul></li></ol><div class="fj-gallery"><p><img src="https://s2.loli.net/2023/03/05/CXSc7AnVeODJhg8.jpg" alt=""></p>          </div><ol><li>滑动平均滤波器(Moving-Average Filter)</li></ol><div class="fj-gallery"><p><img src="https://s2.loli.net/2023/03/05/ryPnV78BWUit1bZ.jpg" alt=""></p>          </div><ul><li>作用：用于平滑数据中的随机变化，去除随机噪声</li><li>局限性：适用随机波动变化快的噪声，信号要没有剧烈随机波动，否则不但滤除了噪声也滤除了信号<ol><li>线性内插器 (Linear Interpolation)</li></ol></li><li>作用：用于估计离散时间序列中相邻的一对样本值之间的样本值大小</li><li>因子为4的内插：<br><img src="https://s2.loli.net/2023/03/05/Abj9nQMEPqdx3Ho.jpg" alt=""><ol><li>中值滤波器(Median Filter)</li></ol></li><li>原理：通过在输入序列{x[n]}上滑动一个长度为奇数的窗口来实现的，每次滑动一个样本值。在任一时刻，滤波器的输出都为当前窗口中所有输入样本值的中值</li><li>作用：常用于去除加性随机冲激噪声，这类噪声将会导致受干扰信号中存在大量突发错误</li></ul><h4 id="离散时间系统分类"><a href="#离散时间系统分类" class="headerlink" title="离散时间系统分类"></a>离散时间系统分类</h4><ol><li>线性系统（Linear System）</li><li>时不变系统（Time-Invariant System）<ul><li>证明步骤：<ul><li>输入延迟x[n-n0]</li><li>延迟后的输入进入系统得到延迟输出 $y_{D}[n]$</li><li>输出延迟y[n-n0]</li><li>验证 $y_{D}[n]$ 是否等于y[n-n0] </li></ul></li></ul></li><li>线性时不变系统（Linear Time-Invariant System）</li><li>因果系统（Causal System）:输出的变化不先于输入的变化<ul><li>注意：在数字系统中非因果系统是可以实现的，可以将非因果(noncausal)系统转化为因果系统实现，因果系统的输出相当于非因果系统的输出延迟，模拟系统不可以实现非因果系统</li></ul></li><li>BIBO稳定系统（BIBO Stable System）:输入有界，输出有界</li><li>无源与无损系统（passive and lossless system）:<ul><li>无源离散时间系统:对每个具有有限能量的输入序列x[n]，输出序列y[n]的能量不超过输入的能量</li><li>无损系统:输出序列y[n]的能量等于输入的能量</li></ul></li><li>对于LTI系统<ul><li>系统脉冲响应h[n]绝对可和，则该系统稳定</li><li>h[n]是因果序列（n&lt;0,h[n]=0）,则该系统为因果系统</li></ul></li></ol><h4 id="卷积和"><a href="#卷积和" class="headerlink" title="卷积和"></a>卷积和</h4><script type="math/tex; mode=display">y[n]=x[n]*h[n]=\sum_{k=-\infty}^{\infty}x[k]h[n-k]=\sum_{k=-\infty}^{\infty}x[n-k]h[k]</script><p>注意：只有线性时不变系统才能这样写</p><h4 id="系统串联与并联"><a href="#系统串联与并联" class="headerlink" title="系统串联与并联"></a>系统串联与并联</h4><ol><li>Cascade Connection（串联）<br>时域卷积，频域相乘</li><li>Parallel Connection（并联）<br>时域相加，频域相加</li></ol><h4 id="有限维LTI离散时间系统表示"><a href="#有限维LTI离散时间系统表示" class="headerlink" title="有限维LTI离散时间系统表示"></a>有限维LTI离散时间系统表示</h4><ol><li>Linear Constant Coefficient Difference Equation(线性常系数差分方程)<script type="math/tex; mode=display">\sum_{k=0}^{N}d_{k}y[n-k]=\sum_{k=0}^{M}p_{k}x[n-k]</script>系统的阶数（order）为max(N,M)</li></ol><h3 id="系统频域分析"><a href="#系统频域分析" class="headerlink" title="系统频域分析"></a>系统频域分析</h3><h4 id="离散时间系统的频域表示"><a href="#离散时间系统的频域表示" class="headerlink" title="离散时间系统的频域表示"></a>离散时间系统的频域表示</h4><ol><li>$ H(e^{jw}) $:frequency response(频响)</li><li>gain function(增益函数)：<script type="math/tex; mode=display">\mathcal{G} (\omega )=20\log_{10}{\left | H(e^{j\omega } ) \right | } dB</script></li><li>attenuation or loss function(衰减或损耗函数)：<script type="math/tex; mode=display">\mathcal{A} (\omega )=-\mathcal{G} (\omega )</script></li><li><p>关于系统频响对系统分析的结论：<br><img src="https://s2.loli.net/2023/03/19/yUvEA6lMYS8xcaD.jpg" alt=""></p><p><code>注：输入，输出信号都是时域信号</code></p></li></ol><h4 id="离散时间系统的频响"><a href="#离散时间系统的频响" class="headerlink" title="离散时间系统的频响"></a>离散时间系统的频响</h4><ol><li>Frequency Response of LTI FIR discrete-time system:<br><img src="https://s2.loli.net/2023/03/19/kipMESTKBIoylGY.jpg" alt=""></li><li>Frequency Response of LTI IIR(infinite impulse response) discrete-time system:<br><img src="https://s2.loli.net/2023/03/19/sGDE7vJVrzgQLB1.jpg" alt=""></li></ol>              </div>            </details><h2 id="有限长离散变换"><a href="#有限长离散变换" class="headerlink" title="有限长离散变换"></a>有限长离散变换</h2><details class="folding-tag" grey><summary> Finite-Length Discrete Transforms </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th>N-point DTFT</th><th>范围</th><th>IDFT</th><th>范围</th></tr></thead><tbody><tr><td>$X[k]=\sum_{n=0}^{L-1} x[n]e^{-j\frac{2\pi k }{N} n} $</td><td>$0\le k \le N-1$</td><td>$x[n]=\frac{1}{N} \sum_{k=0}^{N-1} X[k]e^{j\frac{2\pi k}{N}n }$</td><td>$0\le n \le N-1$</td></tr><tr><td><script type="math/tex">X[k]=\sum_{n=0}^{L-1} x[n]W_{N}^{kn}</script></td><td></td><td><script type="math/tex">x[n]=\frac{1}{N} \sum_{k=0}^{N-1} X[k]W_N^{-kn}</script></td></tr></tbody></table></div><ol><li>循环卷积</li></ol><div class="table-container"><table><thead><tr><th>时域</th><th>频域</th></tr></thead><tbody><tr><td><script type="math/tex">y_{c} [n]=\sum_{k=0}^{N-1} x[k]h[\left \langle n-k \right \rangle_{N}  ]</script></td><td><script type="math/tex">Y_{c} [k]=X[k]\cdot H[k]</script></td></tr></tbody></table></div><ol><li>在时域用循环卷积方法计算线性卷积<br>条件：循环卷积长度大于等于线性卷积长度，可以对序列补零增加循环卷积长度</li><li>在频域用循环卷积方法计算线性卷积<ul><li>对x[n],h[n]补零，保证两序列长度相等且等于原序列做线性卷积的长度</li><li>分别做N+M-1点DFT</li><li>频域相乘</li><li>做N+M-1点IDFT</li></ul></li><li>用循环卷积计算线性卷积优势：<br>用FFT,算出频域中的X[k]，H[k]<br>两者相乘即得频域中的循环卷积<br>再用公式<script type="math/tex">y_{c} [n]=\frac{1}{N} \left \{ FFT \left \{ Y_{c}^{*}[k]  \right \}   \right \} ^{*}</script></li><li>循环共轭对称（circular conjugate-symmetric）<script type="math/tex; mode=display">x[n]=x^{*}[\left \langle -n \right \rangle _{N} ]</script></li><li>循环共轭反对称（circular conjugate-anti-symmetric）<script type="math/tex; mode=display">x[n]=-x^{*}[\left \langle -n \right \rangle _{N} ]</script></li><li>x[n]是实数<ul><li>X[k]循环共轭对称</li><li>x[n]偶函数且循环对称，X[k]是实数，偶函数，由实数可推出其循环对称</li><li>x[n]奇函数且循环反对称，X[k]是虚数，奇函数，由虚数可推出其循环反对称</li></ul></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>从DTFT缩减到DFT,从原本的时域离散变换到频域连续缩到时域离散变换到频域离散<br>本质上说明了有限长时域信号的恢复只需要频域上有限个离散的点</li><li>DTFT与DFT的关系，就是将w变为 2Πk/N</li><li>DFT-based approach:矩阵方法</li><li>有限长序列x[n]长度M与频域采样点数N相等时，从频域变换到时域时，x[n]不变</li><li>x[n],h[n]进行循环卷积时，若采样点数N大于或等于（X[K]的长度+H[k]的长度-1），则循环卷积等于线性卷积的平移，平移距离为采样点数，且长度等于采样点数</li><li>在DFT中，把有限长序列x[n]看作周期序列，且为循环周期序列，循环N为序列长度</li><li>序列经DFT后要想恢复到原序列，采样点数N大于等于序列长度</li></ol>              </div>            </details><h2 id="Z变换"><a href="#Z变换" class="headerlink" title="Z变换"></a>Z变换</h2><details class="folding-tag" grey><summary> Z Transform </summary>              <div class='content'>              <h3 id="Definition-and-Properties"><a href="#Definition-and-Properties" class="headerlink" title="Definition and Properties"></a>Definition and Properties</h3><ol><li>定义：<script type="math/tex; mode=display">G(z)=\sum_{n=-\infty}^{\infty}g[n]z^{-n},z=re^{jw}</script></li><li>作用：扩大了能分析的信号的范围</li><li>ROC(Region of Convergence ，收敛域)</li><li>常用Z变换：<script type="math/tex; mode=display">α^{n}μ[n]→Z变换：\frac{1}{1-αz^{-1}}  →ROC：|z|>|α|</script><script type="math/tex; mode=display">-α^{n}μ[-n-1] →Z变换：\frac{1}{1-αz^{-1}}   → ROC： |z|<|α|</script></li></ol><h3 id="Region-of-Convergence-of-a-Rational-z-Transform"><a href="#Region-of-Convergence-of-a-Rational-z-Transform" class="headerlink" title="Region of Convergence of a Rational z-Transform"></a>Region of Convergence of a Rational z-Transform</h3><ol><li>Finite-length sequence:<ul><li>ROC只有z=0与z= $\infty$ 可能取不到</li></ul></li><li>Infinite-length sequence:<ul><li>Right-handed sequence:|z|&gt;R1</li><li>Left-handed sequence:|z|&lt; R2</li><li>Two-sided sequence:R1&lt; |z| &lt; R2</li><li>以极点所在的圆为边界，因为取极点时，趋于无穷</li></ul></li><li>当H(z)的收敛域包含单位圆时， $H(e^{jw})存在$</li><li>H(z)稳定等价于H(z)收敛域包含单位圆</li><li>若H(z)稳定且因果，则极点一定在单位圆内。</li></ol>              </div>            </details><h2 id="变换域中的-LTI-离散时间系统"><a href="#变换域中的-LTI-离散时间系统" class="headerlink" title="变换域中的 LTI 离散时间系统"></a>变换域中的 LTI 离散时间系统</h2><details class="folding-tag" grey><summary> LTI Discrete-Time Systems in the Transform Domain </summary>              <div class='content'>              <p><div class="note info flat"><p>attenuation:衰减</p></div></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ol><li>Linear-Phase Transfer Function（线性相位传递函数）：<ul><li>定义：<br><img src="https://s2.loli.net/2023/04/13/35DILY7Bqh4we6o.jpg" alt=""></li><li>意义：输出是单频输入的延迟形式</li></ul></li><li>FIR系统能实现线性相位</li><li>能实现线性相位的FIR系统的 h[n]是实数</li><li><p>线性相位FIR系统的单位脉冲响应h[n]满足条件之一:</p><ul><li>条件一：<br><img src="https://s2.loli.net/2023/04/13/uzXR53E9KLksYJq.jpg" alt=""></li></ul><p><img src="https://s2.loli.net/2023/04/13/71fBhPq8OXsUmr2.jpg" alt=""></p><ul><li>条件二：<br><img src="https://s2.loli.net/2023/04/13/LJI3Sq2YyEDOuH5.jpg" alt=""></li></ul><p><img src="https://s2.loli.net/2023/04/13/dXSsPa29ogfrVA1.jpg" alt=""></p><p>注意：<img src="https://s2.loli.net/2023/04/13/lwS7YurnW4qNedD.jpg" alt=""></p><p>amplitude respomse:振幅响应<br>magnitude response:幅频响应</p></li><li>线性相位FIR系统分类及其相频响应具体函数形式：<ul><li>h[n]=h[N-n],0≤n≤N,N为偶数即长度为奇数</li><li>h[n]=h[N-n],0≤n≤N,N为奇数即长度为偶数</li><li>h[n]=-h[N-n],0≤n≤N,N为偶数</li><li>h[n]=-h[N-n],0≤n≤N,N为奇数<br><img src="https://s2.loli.net/2023/04/13/9MWLUaJKxtPRlGw.jpg" alt=""></li></ul></li><li>线性相位FIR系统传递函数 H(z)满足条件:<ul><li>h[n]=h[N-n]时，实系数多项式(real-coefficient polynomial)H(z)为MIP(mirror-image polynomial,镜像多项式)<script type="math/tex; mode=display">H(z)=z^{-N}H(z^{-1})</script></li><li>h[n]=-h[N-n]时，H(z)为AIP(antimirror-image polynomial,反镜像多项式)<script type="math/tex; mode=display">H(z)=-z^{-N}H(z^{-1})</script></li></ul></li><li>实系数线性相位FIR系统的零点位置特点：互为倒数的共轭对</li><li><p>四种实系数线性相位FIR系统在z=±1位置的零点：</p><ul><li>第一类<br>在z=1处无或偶数个零点，在z=-1处无或偶数个零点</li><li>第二类<br>在z=1处无或偶数个零点，在z=-1处奇数个零点</li><li>第三类<br>在z=1处奇数个零点，在z=-1处奇数个零点</li><li>第四类<br>在z=1处奇数个零点，在z=-1处无或偶数个零点</li></ul></li><li><p>滤波器类型：</p><ul><li>低通(lowpass)</li><li>高通(highpass)</li><li>带通(bandpass)</li><li>带阻(bandstop) </li><li>梳状(comb)</li><li>陷波(notch)<br><img src="https://s2.loli.net/2023/04/13/PvmTBUDiCGEOoxK.jpg" alt=""></li></ul></li></ol><h3 id="习题小结"><a href="#习题小结" class="headerlink" title="习题小结"></a>习题小结</h3><ol><li>具有线性相位的FIR系统，输出是输入的延迟形式，这里的输入能用$e^{jw}$表示</li></ol>              </div>            </details><h2 id="IIR数字滤波器的设计"><a href="#IIR数字滤波器的设计" class="headerlink" title="IIR数字滤波器的设计"></a>IIR数字滤波器的设计</h2><details class="folding-tag" grey><summary> IIR Digital Filter Design </summary>              <div class='content'>              <h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ol><li>思维导图：<br><img src="https://s2.loli.net/2023/04/23/i4Tpzk8HVajU3q9.jpg" alt=""></li><li><p><script type="math/tex">\omega _{p} =\frac{\Omega _{p} }{F_{T} } =\frac{2\pi F_{p} }{F_{T} }</script> :通带边界频率</p><p>$\omega_{s}$ :阻带边界频率</p><p>$\delta_{p}$ :通带峰纹波值(peak ripple value)</p><p>$\delta_{s}$ :阻带峰纹波值</p><p><script type="math/tex">\alpha_{p}=-20\log_{10}({1-\delta_{p}}) dB</script> :峰值通带纹波(peak passband ripple)</p><p><script type="math/tex">\alpha_{s} =-20\log_{10}{（\delta _{s} ）}dB</script> :阻带最小衰减</p><p>$\mathcal{A} (\omega )=-20\log_{10}{\left | G(e^{j\omega } ) \right | } $:损耗函数(loss function)</p></li><li>滤波器的比较：<ul><li>FIR filter:阶数较高，复杂度高，更多是关注相位响应</li><li>IIR filter:复杂度低</li></ul></li><li>利用双线性变换(bilinear transformation)将模拟滤波器转换为数字滤波器(即把s平面变换到z平面)<br>$s=\frac{2}{T} \frac{1-z^{-1} }{1+z^{-1} } $,为求方便，T取2<ul><li>映射为非线性映射</li><li>s平面的虚轴映射到z平面单位圆上</li><li>s平面左半平面映射到z平面单位圆内(极点在左半平面模拟系统因果稳定,极点在单位圆内数字系统因果稳定)</li><li>在映射后会产生频率畸变frequency warping：$\Omega =\tan \frac{\omega }{2} $,因此要在第一步预畸(prewarping): $\omega =2\tan^{-1} \Omega$</li></ul></li><li>预畸：消除滤波器在特征频率点(分段的临界频率点,大多数滤波器都具有分段常数的频响特性)的畸变，不能在整个频率段消除非线性畸变</li><li>Butterworth Filter为原型设计模拟滤波器过程:<script type="math/tex; mode=display">\left | H_{a}(j\Omega )  \right |^{2} =\frac{1}{1+(\frac{\Omega }{\Omega _{c} } )^{2N} }</script><script type="math/tex; mode=display">\mathcal{G}(\Omega ) =10\log_{10}{\left | H_{a}(j\Omega )  \right |^{2}} ,\mathcal{G}(0)=0,\mathcal{G}(\Omega _{c} )=-3dB</script><script type="math/tex; mode=display">H_{a}(s)=\frac{1}{D(\frac{s}{\Omega _{c} } )}</script><ul><li>N一般不是整数，需取大于且最接近于它的整数</li></ul></li></ol>              </div>            </details><h2 id="FIR数字滤波器的设计"><a href="#FIR数字滤波器的设计" class="headerlink" title="FIR数字滤波器的设计"></a>FIR数字滤波器的设计</h2><details class="folding-tag" grey><summary> FIR Digital Filter Design </summary>              <div class='content'>              <ol><li><p>窗式傅里叶级数方法(Windowed Fourier series approach)设计</p><ul><li><p>用IDTFT求理想低通滤波器的单位脉冲响应</p><script type="math/tex; mode=display">H_{d} (e^{j\omega } )=\left\{\begin{matrix}1&\left | \omega  \right |< \omega _{c}   \\0&\omega _{c}< \left | \omega  \right | < \pi  \end{matrix}\right.</script><script type="math/tex; mode=display">h_{d} [n]=\frac{1}{2\pi } \int_{-\omega _{c} }^{\omega _{c} } H_{d}(e^{j\omega } ) e^{j\omega n} d\omega =\frac{1}{2\pi } \frac{e^{j\omega _{c}n }-e^{-j\omega _{c} n}  }{jn} =\frac{\sin \omega _{c} n}{\pi n} ,-\infty < n< \infty</script></li><li><p>取<script type="math/tex">h_{d}[n]在区间-M < n < M部分，即h_{d}[n]\cdot \omega_{R} [n](矩形窗函数) ，令其为h_{t}[n]</script></p></li><li>令$h[n]=h_{t}[n-M]$,得到实系数线性相位FIR系统</li></ul></li><li>分析<script type="math/tex">H_{t}(e^{jw})与H_{d}(e^{jw})</script> 的关系(吉布斯现象)<ul><li>时域相乘等于频域相卷积，L=2M+1为窗长,<script type="math/tex">H_{t}(e^{j\omega } )   =\frac{1}{2\pi } \int_{-\pi }^{\pi } H_{d} (e^{j\varphi } )\Psi (e^{j(\omega -\varphi )} )d\varphi</script></li><li>频域中窗谱为<script type="math/tex">\left | \Psi _{R}(e^{j\omega } )  \right | =\left | \frac{\sin (\omega L/2)}{\sin (\omega /2)}  \right |</script><br>其一个周期内的幅度谱（-Π到Π），<br>主瓣宽度为4Π/L ，与窗长度成反比，主瓣高度为L，与窗长一致，窗长增加主瓣宽度变窄，同时主瓣高度也变高，主瓣的面积保持不变<br>旁瓣窗的类型不变，相对旁瓣水平(13dB)也固定，不随窗长增加而变化，窗长增加，旁瓣宽度也变窄，但面积也不变</li><li>窗长L增加，窗谱主瓣宽度变窄，所以设计的FIR滤波器的频响过渡带宽变窄<br>窗长L增加，窗谱的旁瓣宽度也变窄，进入积分区间的旁瓣变多，所以通阻带的波动更密集，震荡加快，但因为每个主旁瓣面积不变，所以每个震荡的幅度不会变小。最大幅度近似不变,随着窗长变长，而越来越趋近于恒值</li></ul></li><li>加窗带来的频响变化:过渡带和通阻带波动<br>调整的两个方向：窗长(L)和窗型</li><li><p>不同的窗型以及要满足的最低要求：</p><div class="fj-gallery"><p><img src="https://s2.loli.net/2023/04/25/JGnID3TfcqUs6yd.jpg" alt=""><br><img src="https://s2.loli.net/2023/04/25/rgB3qIGjCEko59L.jpg" alt=""></p>      </div><p>主瓣宽度要大于过渡带宽<br>求理想滤波器的$w_{c}$ ：</p><script type="math/tex; mode=display">\omega_{c}=\frac{\omega _{p} +\omega _{s} }{2}</script></li></ol>              </div>            </details><h2 id="DSP算法实现"><a href="#DSP算法实现" class="headerlink" title="DSP算法实现"></a>DSP算法实现</h2><details class="folding-tag" grey><summary> DSP Algorithm Implementation </summary>              <div class='content'>              <ol><li>N点的DFT：<script type="math/tex; mode=display">X[k]=\sum_{n=0}^{N-1} x[n]W_{N}^{kn} ,W_{N} =e^{-j\frac{2\pi }{N} } ,0\le n\le N-1</script></li><li><p>FFT: fast implementation of the DFT</p><script type="math/tex; mode=display">X[k]=X_{0}[\left \langle k \right \rangle _{N/2} ] +W_{N}^{kn} X_{1} [\left \langle k \right \rangle _{N/2} ],0\le k\le  N-1</script><script type="math/tex; mode=display">X_{0} [k]=\sum_{r=0}^{\frac{N}{2}-1 } x[2r]W_{N/2}^{kr} =\sum_{r=0}^{\frac{N}{2}-1 } x_{0}[r] W_{N/2}^{kr}</script><script type="math/tex; mode=display">X_{1} [k]=\sum_{r=0}^{\frac{N}{2}-1 } x[2r+1]W_{N/2}^{kr} =\sum_{r=0}^{\frac{N}{2}-1 } x_{1}[r] W_{N/2}^{kr}</script></li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装VMware</title>
      <link href="/posts/8862c758.html"/>
      <url>/posts/8862c758.html</url>
      
        <content type="html"><![CDATA[<h2 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h2><ul><li>电工电子实验要在虚拟机上装ISE(因为ISE只能在Win10系统装)，本是一件很轻松的事，但装虚拟机这一步就卡住了，搞了一下午才装好，还是值得记录一下的。</li></ul><h2 id="Microsoft-runtime-dll未能完成安装"><a href="#Microsoft-runtime-dll未能完成安装" class="headerlink" title="Microsoft runtime dll未能完成安装"></a>Microsoft runtime dll未能完成安装</h2><p>&emsp;&emsp;点开set up.exe文件，弹出这么个玩意，经过网上搜索，发现遇到这问题的还蛮多的，解决如下：</p><ol><li>弹出“Microsoft runtime dll未能完成安装”这个窗口时，不要点确定，就挂在那，按住<kbd>win</kbd>+<kbd>R</kbd>,输入%temp%,看一下时间，在窗口里点击时间几乎差不多的<strong>文件夹</strong>，会弹出窗口需要点击继续才能进去，但因为之前挂在屏幕中间的安装图的原因，点不了</li><li>这时点之前挂在那的窗口的确定，安装图消失了，把那个需要点击继续的那个窗口往旁边移一下</li><li>这时再点开set up.exe文件，弹出“Microsoft runtime dll未能完成安装”这个窗口时，不要点确定，点击另一个窗口中的继续，那个<strong>文件夹</strong>就可以打开了</li><li>点击VMwareWorkstation.msi那个，就能安装了（一路点下去就行）。</li></ol><h2 id="无权输入许可证密钥，请使用系统管理员账户重试"><a href="#无权输入许可证密钥，请使用系统管理员账户重试" class="headerlink" title="无权输入许可证密钥，请使用系统管理员账户重试"></a>无权输入许可证密钥，请使用系统管理员账户重试</h2><ol><li>点开VMware软件时，要想使用，需要输入许可证密钥，但他喵的又不允许输入，又在网上搜素了半天，要在终端上执行，两个方法打开终端：</li></ol><ul><li>鼠标右键开始菜单，选择Windows PowerShell(管理员)，以为到这就差不多了，结果他喵的牛马电脑弹出没有与之关联的应用来执行该操作,<del>我没有关联尼玛</del>，没办法，只能用第二种方法</li><li>摁住<kbd>Shift</kbd> + <kbd>Ctrl</kbd>+<kbd>Esc</kbd>,进入任务管理器，点击”文件”-“运行新任务”，输入PowerShell,要勾选“使用管理员身份创建这个任务”，这样就进入终端了</li></ul><ol><li>右键点击VMware软件，选择打开文件所在位置，复制“该位置\x64\，”</li><li>在终端输入 cd 复制的内容(Ctrl+V)，按回车</li><li>再输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vmware-vmx.exe --new-sn 密钥内容</span><br></pre></td></tr></table></figure></li><li>如果没报错，那就成功啦！</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>崩坏3</title>
      <link href="/posts/27398571.html"/>
      <url>/posts/27398571.html</url>
      
        <content type="html"><![CDATA[<h2 id="毕业旅行"><a href="#毕业旅行" class="headerlink" title="毕业旅行"></a>毕业旅行</h2><details class="folding-tag" grey><summary> 毕业旅行 </summary>              <div class='content'>              <div align=center class="aspect-ratio">    <iframe src="https://player.bilibili.com/player.html?aid=437800204&&page=1&as_wide=1&high_quality=1&danmaku=0"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div>              </div>            </details><h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>刚看完主线终章，算是一次深刻的回忆。尽管我入坑只有不到一年，更多的只是看客，没有多么深刻的羁绊，但其中的一些片段，依旧让我留恋。最后一刻，薪炎永燃，阿波卡利斯如是说，因你而在的故事。。。姬子，爱莉希雅，凯文，御三家。。。也许最后的故事没有多么的特别，但也没必要多么特别，这仅仅是关于传承的故事，打破人类的命运，仅此而已。。。<br>故事的旋律贯彻出一种无奈，对终焉的无奈。也许，若有独断万古的力量，世间规则又怎敢加诸我身？<br>当然，现实中的我终究是渺小的。“鸟儿为什么会飞？”，“飞翔是为了坠落”，供后人践踏，飞的更高。“承自往昔，跨越现在，直至未来”。<br>至此，她们的故事结束了，接下来，是我的故事。。。<br><div class="fj-gallery"><p><img src="https://s2.loli.net/2023/03/05/imlRhLoaGfUeyVN.jpg" alt=""><br><img src="https://s2.loli.net/2023/03/05/AOMNh5x7HZXlctd.webp" alt=""><br><img src="https://s2.loli.net/2023/03/05/Z3bJLEhmqsUY1zB.jpg" alt=""><br><img src="https://s2.loli.net/2023/03/05/A7tNjoH3IQwS1Fg.jpg" alt=""></p>          </div></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微型计算机原理与接口技术</title>
      <link href="/posts/c5ff8811.html"/>
      <url>/posts/c5ff8811.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>参考:<a href="https://mooc.mengmianren.com/mooc/48504.html">慕课</a></p></div><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li>思维导图：<br><img src="https://s2.loli.net/2023/03/26/pzsiYGtumB6PNfT.png" alt="微型计算机原理与接口技术1.png"><br>详情见：<a href="https://www.kdocs.cn/view/l/clmNbouXPIHH?from=pwa">https://www.kdocs.cn/view/l/clmNbouXPIHH?from=pwa</a></li></ul><ol><li>存储器是计算机系统的记忆设备，主存储器主要用来( 存储指令和数据 )。</li></ol>              </div>            </details><h2 id="80X86微处理器"><a href="#80X86微处理器" class="headerlink" title="80X86微处理器"></a>80X86微处理器</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ol><li>思维导图：<br><img src="https://s2.loli.net/2023/03/26/p16FUYNGSknBLw8.png" alt="微型计算机原理与接口技术2.png"><br>详情见: <a href="https://www.kdocs.cn/view/l/cvUKgidzUkQj?from=pwa">https://www.kdocs.cn/view/l/cvUKgidzUkQj?from=pwa</a></li></ol>              </div>            </details><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li>思维导图<br><img src="https://s2.loli.net/2023/03/26/xRWgBnSjkQhOp6s.png" alt="微型计算机原理与接口技术3.1.png"><br><img src="https://s2.loli.net/2023/03/26/nRQJIszWiZdv6F4.png" alt="微型计算机原理与接口技术3.2.png"><br>详情见: <a href="https://www.kdocs.cn/view/l/cs12jJSDepuL?from=pwa">https://www.kdocs.cn/view/l/cs12jJSDepuL?from=pwa</a><br>基本集指令见：<a href="https://www.kdocs.cn/view/l/ckGgA7aHPh5D?from=pwa">https://www.kdocs.cn/view/l/ckGgA7aHPh5D?from=pwa</a></li></ul><ol><li>实模式下，CPU要执行的下一条指令的逻辑地址分别存放在（ CS:IP  ）寄存器中。</li><li>一个单元的偏移地址是该单元第一个存储单元的地址。</li><li>内存操作数寻址的存储单元内容进行改变除了变量名直接寻址的都要用PTR进行申明类型属性。</li><li>MOV AL,[DI+SI]中，[DI+SI]为变址＋变址，不合法</li><li>堆栈通常是在内存中的堆栈段（Stack Segment）中实现的</li><li>寻址堆栈：SS: SP/BP</li><li>BUF+1是从BUF中的第二个字节地址里面的内容开始访问</li><li>将BUF内存单元的偏移地址传送到BX中，有两种：<ul><li>MOV  BX,  OFFSET BUF</li><li>LEA BX,BUF</li></ul></li><li>堆栈：像盖房子一样，PUSH，POP最少2字节，即SP最少+2或减2浮动，SP始终指向最后进的的数的低位，并且与存储单元存储数据一样，也是低位进低地址，高位进高地址，只是后进的数地址更低，而存储单元存数据是后进的数地址越高</li><li>MOV指令默认复制的是一个字节（即8位），要想复制16位，要写成MOV WORD PTR…,…</li><li>80x86微处理器的标志寄存器中，和串指令相关的的标志位是（DF）</li><li>REPE (Repeat while Equal)：指令前缀，表示在CX寄存器中的计数器不为零并且比较相等时，将重复执行操作</li><li>CMPSB (Compare String Byte)：比较字符串操作指令，用于比较DS:SI和ES:DI指向的连续字节数据。在执行指令之前，需要将ES和DI设置为目标字符串的起始地址，DS和SI设置为源字符串的起始地址。比较时，将逐个字节地比较两个字符串中对应位置的字节，直到两个字节不相等或者CX为零为止。如果比较过程中发现不相等的字节，则ZF标志位将被清零，否则ZF标志位将被设置为1。在发现不相等的字节时，SI指向的地址还会+1</li><li>?  — 随机数, Dup ~ Duplicate(重复)</li><li>3 Dup(?) 代表3个用逗号间隔的随机数</li><li>5 Dup (‘A’) 代表5个用逗号间隔的A的ASC∏码</li></ol>              </div>            </details><h2 id="汇编语言程序设计"><a href="#汇编语言程序设计" class="headerlink" title="汇编语言程序设计"></a>汇编语言程序设计</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li>思维导图<br><img src="https://s2.loli.net/2023/03/30/pWjoQK8rRnYZF3k.png" alt="微型计算机原理与接口技术4.png"><br>详情见：<a href="https://www.kdocs.cn/view/l/cggwtFowO51X?from=pwa">https://www.kdocs.cn/view/l/cggwtFowO51X?from=pwa</a></li></ul><ol><li>CPU执行的是链接程序后生成的可执行文件中的机器指令（目标指令）（一串0，1代码）</li><li>CPU内部有一个指令集架构（Instruction Set Architecture，ISA），用于定义CPU所支持的指令集，包括基本指令集和扩展指令集</li><li>MOVE AX,DATA  MOVE DS,AX中 ，MOVE是基本指令集，在CPU中执行时，DATA变成了立即数，所以不能直接写成MOVE DS,DATA<br>也可以理解成：段寄存器的赋值必须通过通用寄存器</li><li>立即数不能直接赋给段寄存器：<br>由于立即数直接写入段寄存器这样的指令，被翻译成机器码之后将占用更多的字节，在事先规定的指令长度范围内无法存贮下这么多的内容，因此改由先写入通用寄存器，再由通用寄存器写入段寄存器的办法代替。立即数实际上是相当占地方的。</li><li>DOS中的01H功能调用，键入字符后，AL接收的是该字符的ASCLL码，并且每进行一次调用，AL内的值都会刷新</li><li>DOS中的0AH功能调用，键入一段字符并按回车后，缓冲区从BUF+2开始为键入字符串的实际存储区域，其最后有回车键的ASCLL码(0DH)</li><li>CS段寄存器程序员是不能赋值的</li><li>要在屏幕上显示一彩色字符串，可以调用的是(BIOS INT 10H的13H号)功能调用</li><li>MOV   AH,0EH<br>INT    10H<br>在屏幕中显示DL寄存器内的数，并以二进制格式呈现</li><li>在汇编语言中，用于定义变量、内存空间分配的是(伪指令)</li><li>CPU执行近过程RET指令，从堆栈中弹出（2）个字节：RET指令用栈的数据修改IP的值，从而实现近转移，相当于POP IP</li><li>宏指令必须先定义，后调用；而子程序则可以先调用，后定义</li><li>JG是有符号数的比较，G是Greater</li></ol><h3 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h3><h4 id="顺序程序设计"><a href="#顺序程序设计" class="headerlink" title="顺序程序设计"></a>顺序程序设计</h4><ol><li>从键盘输入一个字符并存储到字节变量BUF单元中<ul><li>分析：<br>用DOS功能调用完成键入，输入的字符保存在AL寄存器中<br>将AL中的内容存到定义在数据段的变量BUF所指单元中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        .486</span><br><span class="line">DATA        SEGMENT    USE16</span><br><span class="line">BUF        DB   ？</span><br><span class="line">DATA        ENDS</span><br><span class="line">CODE        SEGMENT    USE16</span><br><span class="line">        ASSUME        CS : CODE ,  DS : DATA</span><br><span class="line">BEG:        MOV   AX  , DATA</span><br><span class="line">        MOV   DS   , AX</span><br><span class="line">        MOV   AH  , 1</span><br><span class="line">        INT   21H                             ;AL=键入字符的</span><br><span class="line">        MOV   BUF , AL                         ASCII码</span><br><span class="line">        MOV   AH   , 4CH</span><br><span class="line">        INT   21H</span><br><span class="line">CODE    ENDS</span><br><span class="line">        END   BEG</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="简单分支"><a href="#简单分支" class="headerlink" title="简单分支"></a>简单分支</h3><p>将BX寄存器的内容以二进制数格式显在屏幕上</p><ul><li>流程图：<div class="fj-gallery"><p><img src="https://s2.loli.net/2023/03/30/jn2sZOeIMXWY4HG.jpg" alt=""></p>        </div></li><li>源程序：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">           · 486</span><br><span class="line">CODE   SEGMENT   USE16</span><br><span class="line">           ASSUME     CS:CODE</span><br><span class="line">BEG:    MOV    BX,5678H</span><br><span class="line">           MOV    CX,16</span><br><span class="line">LAST:  MOV     DL,’0’</span><br><span class="line">           ROL      BX,1</span><br><span class="line">           JNC       NEXT</span><br><span class="line">           MOV     DL,’1’</span><br><span class="line">NEXT:  MOV    AH,2H</span><br><span class="line">           INT      21H</span><br><span class="line">           LOOP   LAST</span><br><span class="line">           MOV    AH,4CH</span><br><span class="line">           INT       21H</span><br><span class="line">CODE   ENDS</span><br><span class="line">           END    BEG   </span><br></pre></td></tr></table></figure></li></ul><h3 id="循环程序设计"><a href="#循环程序设计" class="headerlink" title="循环程序设计"></a>循环程序设计</h3><p>假设从BUF单元开始为一个字符串ASCII码,找出其中的最大数送屏幕显示</p><ul><li>流程图：<div class="fj-gallery"><p><img src="https://s2.loli.net/2023/03/30/GcYQu63WV84yL1F.jpg" alt=""></p>        </div></li><li>源程序：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">            · 486 </span><br><span class="line">DATA     SEGMENT USE16</span><br><span class="line">BUF      DB     <span class="string">&#x27;QWERTYUIOP123&#x27;</span></span><br><span class="line">COUNT    EQU  $ -BUF;统计串长度</span><br><span class="line">MAX      DB  <span class="string">&#x27;MAX=&#x27;</span>,?,0DH,0AH,<span class="string">&#x27;$&#x27;</span></span><br><span class="line">DATA     ENDS</span><br><span class="line">CODE     SEGMENT USE16</span><br><span class="line">ASSUME   CS:CODE,DS:DATA</span><br><span class="line">BEG:     MOV   AX,DATA</span><br><span class="line">            MOV   DS,AX</span><br><span class="line">            MOV   AL,0                </span><br><span class="line">            ;无符号最小数 0 →AL</span><br><span class="line">            LEA    BX,BUF              </span><br><span class="line">            ;串首址偏移量→BX  </span><br><span class="line">            MOV  CX,COUNT</span><br><span class="line">            ;串长度→CX  </span><br><span class="line">LAST:    CMP     [BX],AL;比较</span><br><span class="line">            JC         NEXT</span><br><span class="line">            MOV    AL,[BX];大数→AL</span><br><span class="line">NEXT:    INC       BX</span><br><span class="line">            LOOP   LAST    ;循环计数</span><br><span class="line">            MOV     MAX+4,AL            </span><br><span class="line">            ;最大数→MAX+4 单元</span><br><span class="line">            MOV     AH,9</span><br><span class="line">            MOV     DX,OFFSET MAX</span><br><span class="line">            INT        21H      ;显示结果</span><br><span class="line">            MOV     AH,4CH</span><br><span class="line">            INT        21H      ;返回 DOS</span><br><span class="line">CODE     ENDS</span><br><span class="line">            END     BEG  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>                            </div>            </details><h2 id="存储器系统"><a href="#存储器系统" class="headerlink" title="存储器系统"></a>存储器系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li>思维导图：<br><img src="https://s2.loli.net/2023/04/03/hxr5vzlekHuJoTy.png" alt="微型计算机原理与接口技术6.png"><br>详情见：<a href="https://www.kdocs.cn/view/l/ciCd2PBT3mDg?from=pwa">https://www.kdocs.cn/view/l/ciCd2PBT3mDg?from=pwa</a></li></ul><ol><li>有若干片1K×8位的SRAM芯片，采用字扩展方法构成4KB存储器，问：需要（4）片SRAM，寻址该存储器需要（12）根地址线，参与片选的地址位至少需要     （2）位。</li><li>现有16K×1位的静态RAM芯片，欲组成128K×8位的存储器，需要（64）片这样的静态RAM芯片，需组成（8）个芯片组，这属于（字位同时）（字、位或者字位同时）扩展，用于片内地址选择的地址线（14）根，至少需用（3）根地址线进行译码来实现不同芯片组的选择。</li><li>设机器字长32位，存储容量1GB，若按字节寻址，则至少需要（30）根地址线<ul><li>机器字长：CPU一次能处理数据的位数，通常与CPU的寄存器的位数有关</li><li>存储字长：存储单元的位数</li><li>存储容量=字数（n根地址线，字数为<script type="math/tex">2^n</script>）x存储字长</li><li>按字节寻址，说明存储字长为1Byte</li></ul></li></ol>              </div>            </details><h2 id="输入-输出系统"><a href="#输入-输出系统" class="headerlink" title="输入/输出系统"></a>输入/输出系统</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <p>详情见 ：<a href="https://www.kdocs.cn/view/l/cdhAdAdsq690?from=docs">https://www.kdocs.cn/view/l/cdhAdAdsq690?from=docs</a></p><ol><li>系统总线中地址线的功能是（<code>指定主存和I/O设备接口电路的地址</code>）</li></ol>              </div>            </details><h2 id="中断系统与-8259A-中断控制器"><a href="#中断系统与-8259A-中断控制器" class="headerlink" title="中断系统与 8259A 中断控制器"></a>中断系统与 8259A 中断控制器</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <ul><li>思维导图：<br><a href="https://kdocs.cn/l/cuf2bFTjKhic">https://kdocs.cn/l/cuf2bFTjKhic</a><br><a href="https://kdocs.cn/l/ci6kCU91uS3o">https://kdocs.cn/l/ci6kCU91uS3o</a></li></ul><ol><li>n型中断向量在系统RAM中存放在4n~4n+3单元<br>nH(16进制)型中断向量在系统RAM中存放，nH×4将nH转成二进制数再左移两位</li><li>在中断响应周期，8259A向CPU提供相应的中断类型码(n),CPU根据中断类型码自动到中断向量表中取相应的中断向量(地址)</li><li>根据中断源的不同，中断可以分为外部中断和内部中断两大类<h3 id="实模式下的定时中断程序设计"><a href="#实模式下的定时中断程序设计" class="headerlink" title="实模式下的定时中断程序设计"></a>实模式下的定时中断程序设计</h3></li><li>中断源是系统8254的0＃计数器，但定时周期≠55ms的整数倍，重新对8254 0＃计数器进行初始化<ul><li>流程图：<br><img src="https://s2.loli.net/2023/05/08/DpaleVxNwIBzJ5g.png" alt="定时周期不等于55ms整数倍的处理框图"></li><li>每隔xms产生一次中断：若计数器脉冲周期为1ms,计数器应工作在方式3，计数初值=2x，OUT0=周期为2xms的方波信号（1:1连续波形）（因为OUT0接8269A的IRi,为1时表示有了中断请求信号）</li></ul></li><li>采用系统自带的8259A的日时钟中断请求，定义外扩中断1CH服务程序，保护现场（要压栈DS），因为在日时钟中断处理中将40H赋给了DS<br>这个1CH型中断是嵌套在8H型中断里的，对其进行改变，要保护8H型中断内容</li></ol>              </div>            </details><h2 id="微机系统串行通信"><a href="#微机系统串行通信" class="headerlink" title="微机系统串行通信"></a>微机系统串行通信</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <p>详情见：<a href="https://kdocs.cn/l/clw0Ao47o5nI">https://kdocs.cn/l/clw0Ao47o5nI</a></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ol><li>题目：编写程序对微机系统的串口进行自发自收外环测试；发送采用查询方式,接收采用中断方式，数据发送从键盘键入，接受数据屏幕显示</li><li>分析：<ul><li>外环自发自收：把串行口的2端子与3端子连接（实验室已连接好，且用的辅串口）</li><li>发送采用查询方式，数据发送从键盘输入：<br>设置FLAG变量（初值为0）,在主程序中检测FLAG为1（在中断中更改，说明接收到结束字符#（23H））,则结束中断,主程序结束<br>查询键盘缓冲区与通信线状态寄存器，当键盘缓冲区有内容时（可使用16H软中断的1号子功能），读取出键盘缓冲区ASCLL码（可使用16H软中断的0号子功能）<br>查询通信线状态寄存器（2FDH）的D5位，若为1，发送保持寄存器空闲，可将键盘缓冲区数据送入发送保持寄存器<br>查询通信线状态寄存器（2FDH）的D6位，若为1，发送移位寄存器空闲，表明一帧数据已发送，在数据全部输入完使用，保证数据全部发送</li><li>接收采用中断方式，接受数据屏幕显示：<br>开放主8259的辅串口（中断类型码为0BH，引脚IR3）<br>进入中断服务子程序后读取接收缓冲寄存器内容，若不是‘#’，则在屏幕中显示；若为‘#’，则FLAG变量置1</li></ul></li><li><p>知识点梳理：</p><ul><li>8250初始化：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">I8250 PROC</span><br><span class="line">        MOV DX, 2FBH</span><br><span class="line">MOV AL, 80H</span><br><span class="line">OUT DX, AL          ;寻址位置1，访问除数寄存器</span><br><span class="line"></span><br><span class="line">MOV DX, 2F9H</span><br><span class="line">MOV AL, 0</span><br><span class="line">OUT DX, AL           ；写除数寄存器低8位</span><br><span class="line">MOV DX, 2F8H</span><br><span class="line">MOV AL, 30H</span><br><span class="line">OUT DX, AL           ；写除数寄存器低8位</span><br><span class="line"></span><br><span class="line">MOV DX, 2FBH</span><br><span class="line">MOV AL, 03H</span><br><span class="line">OUT DX, AL          ；写数据帧格式，寻址位置0</span><br><span class="line"></span><br><span class="line">MOV DX, 2F9H</span><br><span class="line">MOV AL, 01H</span><br><span class="line">OUT DX, AL           ；中断允许寄存器，D0=1,允许接收中断</span><br><span class="line"></span><br><span class="line">MOV DX, 2FCH</span><br><span class="line">MOV AL, 0BH</span><br><span class="line">OUT DX, AL</span><br><span class="line">RET             ；MODEM控制寄存器，D3=1（D1,D0任意）能送出中断请求</span><br><span class="line">I8250 ENDP</span><br></pre></td></tr></table></figure></li><li>8259A初始化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I8259 PROC</span><br><span class="line">      IN AL,21H         ;读取主8259中断屏蔽寄存器</span><br><span class="line">      AND AL,11110111B  ；开放IR3引脚中断请求</span><br><span class="line">      OUT 21H,AL</span><br><span class="line">      RET</span><br><span class="line">I8259 ENDP</span><br></pre></td></tr></table></figure></li></ul></li><li><p>程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">.486</span><br><span class="line">DATA SEGMENT USE16</span><br><span class="line">OLD0B DD ?            ;保存原0BH中断向量的地址</span><br><span class="line">FLAG DB 0</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT USE16</span><br><span class="line">ASSUME CS:CODE, DS:DATA</span><br><span class="line"></span><br><span class="line">BEG:MOV AX, DATA</span><br><span class="line">MOV DS, AX</span><br><span class="line">      CLI</span><br><span class="line">     CALL I8250</span><br><span class="line">     CALL I8259</span><br><span class="line">     CALL RD0B</span><br><span class="line">     CALL WR0B</span><br><span class="line">     STI</span><br><span class="line">     </span><br><span class="line">SCANT:CMP FLAG,1</span><br><span class="line">      JZ RETURN</span><br><span class="line">      MOV AH,1</span><br><span class="line">      INT 16H</span><br><span class="line">      JZ SCANT</span><br><span class="line">      MOV DX,2FDH</span><br><span class="line">      IN AL,DX</span><br><span class="line">      TEST AL,20H</span><br><span class="line">      JZ SCANT</span><br><span class="line">      MOV AH,0</span><br><span class="line">      INT 16H</span><br><span class="line">      AND AL,7FH</span><br><span class="line">      MOV DX,2F8H</span><br><span class="line">      OUT DX,AL</span><br><span class="line">      JMP SCANT</span><br><span class="line">TWA: MOV DX,2FDH</span><br><span class="line">     IN AL,DX</span><br><span class="line">     TEST AL,40H</span><br><span class="line">     JZ TWA</span><br><span class="line">     </span><br><span class="line">      </span><br><span class="line">RETURN: CALL RESET</span><br><span class="line">      MOV AH,4CH</span><br><span class="line">      INT 21H</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RECEIVE PROC            ；中断服务子程序</span><br><span class="line">        PUSH AX</span><br><span class="line">        PUSH DX</span><br><span class="line">        PUSH DS</span><br><span class="line">        MOV AX,DATA</span><br><span class="line">        MOV DS,AX</span><br><span class="line">        MOV DX,2F8H</span><br><span class="line">        IN AL,DX</span><br><span class="line">        AND AL,7FH</span><br><span class="line">        CMP AL,23H</span><br><span class="line">        JZ NEXT</span><br><span class="line">        MOV AH,2</span><br><span class="line">        MOV DL,AL</span><br><span class="line">        INT 21H</span><br><span class="line">        JMP EXIT</span><br><span class="line">NEXT: MOV FLAG,1</span><br><span class="line">EXIT: MOV AL,20H         </span><br><span class="line">      OUT 20H,AL          ；将中断结束命令字（20H）写入主8259接收中断结束命令的寄存器（口地址20H）</span><br><span class="line">      POP DS</span><br><span class="line">      POP DX</span><br><span class="line">      POP AX</span><br><span class="line">      IRET</span><br><span class="line">RECEIVE ENDP</span><br><span class="line"></span><br><span class="line">I8250 PROC</span><br><span class="line">MOV DX, 2FBH</span><br><span class="line">MOV AL, 80H</span><br><span class="line">OUT DX, AL</span><br><span class="line"></span><br><span class="line">MOV DX, 2F9H</span><br><span class="line">MOV AL, 0</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV DX, 2F8H</span><br><span class="line">MOV AL, 30H</span><br><span class="line">OUT DX, AL</span><br><span class="line"></span><br><span class="line">MOV DX, 2FBH</span><br><span class="line">MOV AL, 03H</span><br><span class="line">OUT DX, AL</span><br><span class="line"></span><br><span class="line">MOV DX, 2F9H</span><br><span class="line">MOV AL, 01H</span><br><span class="line">OUT DX, AL</span><br><span class="line"></span><br><span class="line">MOV DX, 2FCH</span><br><span class="line">MOV AL, 0BH</span><br><span class="line">OUT DX, AL</span><br><span class="line">RET</span><br><span class="line">I8250 ENDP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I8259 PROC</span><br><span class="line">      IN AL,21H</span><br><span class="line">      AND AL,11110111B</span><br><span class="line">      OUT 21H,AL</span><br><span class="line">      RET</span><br><span class="line">I8259 ENDP</span><br><span class="line"></span><br><span class="line">RD0B PROC          ；保存0BH中断向量中原地址</span><br><span class="line">     MOV AX,350BH</span><br><span class="line">     INT 21H</span><br><span class="line">     MOV WORD PTR OLD0B,BX</span><br><span class="line">     MOV WORD PTR OLD0B+2,ES</span><br><span class="line">     RET</span><br><span class="line">RD0B ENDP</span><br><span class="line"></span><br><span class="line">WR0B PROC          ;在0BH中断向量中写入新的地址</span><br><span class="line">     PUSH DS</span><br><span class="line">     MOV AX,CODE</span><br><span class="line">     MOV DS,AX</span><br><span class="line">     MOV DX,OFFSET RECEIVE</span><br><span class="line">     MOV AX,250BH</span><br><span class="line">     INT 21H</span><br><span class="line">     POP DS</span><br><span class="line">     RET</span><br><span class="line">WR0B ENDP</span><br><span class="line"></span><br><span class="line">RESET PROC</span><br><span class="line">      IN AL,21H</span><br><span class="line">      OR AL,00001000B  </span><br><span class="line">      OUT 21H,AL       ；屏蔽IR3引脚中断请求</span><br><span class="line">      MOV AX,250BH     ；恢复中断向量 </span><br><span class="line">      MOV DX,WORD PTR OLD0B</span><br><span class="line">      MOV DS,WORD PTR OLD0B+2</span><br><span class="line">      INT 21H</span><br><span class="line">      RET</span><br><span class="line">RESET ENDP</span><br><span class="line"></span><br><span class="line">CODE ENDS</span><br><span class="line">      END BEG</span><br></pre></td></tr></table></figure></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>在Intel 8250芯片中，实现<code>并行</code>数据转换为<code>串行</code>的是<code>发送器</code>，实现<code>串行</code>数据转换为<code>并行</code>的是<code>接收器</code></li><li>电平转换电路:用于将不同电平的信号转换为串口芯片所能接受的电平信号<br>要测试电平转换电路是否正常工作，需要使用外部测试设备或者信号发生器,因此<code>不能使用8250的内环自检方式检测电平转换电路是否正常工作</code></li><li>已知主机A和B间主串口以单工方式进行异步串行通信，不需要使用联络线，则A、B间的通信至少需要<code>2</code>条连线<br>一条传输数据的单向通道（连TXD与RXD），一条地线（GND）</li></ol>              </div>            </details><h2 id="并行接口芯片8255A"><a href="#并行接口芯片8255A" class="headerlink" title="并行接口芯片8255A"></a>并行接口芯片8255A</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <p>详情见：<a href="https://www.kdocs.cn/view/l/cg8Mx3U1KiZv?from=docs">https://www.kdocs.cn/view/l/cg8Mx3U1KiZv?from=docs</a></p>              </div>            </details><h2 id="可编程定时器-计数器"><a href="#可编程定时器-计数器" class="headerlink" title="可编程定时器/计数器"></a>可编程定时器/计数器</h2><details class="folding-tag" grey><summary> 详解 </summary>              <div class='content'>              <p>详情见：<a href="https://www.kdocs.cn/view/l/cdapOAxskqT0?from=docs">https://www.kdocs.cn/view/l/cdapOAxskqT0?from=docs</a></p><ol><li>8254计时器标注的A1,A0可以连接I/O口地址（A9~A0的任意两个），一般连A1,A0，这样口地址是连续的</li><li>8254计数器先减1再判断是否为0<ul><li>计数初值二进制表示0~FFFFH实际表示1~10000H</li><li>计数初值用BCD码表示0~9999实际表示1~10000</li></ul></li><li>4000H，看方式控制字的D0位<ul><li>D0=1,用BCD码表示，为4000</li><li>D0=0,用二进制表示，为16384</li></ul></li><li>将8254的0号计数器与1号计数器级联，两者均工作在方式3，计数初值均采用BCD码，设第一个计数器的时钟频率为2MHz，则级联后输出方波的最大周期为<code>50秒</code><ul><li>两个计数器级联，表明第一个计数器输出作为第二个计数器输入，要想级联后输出方波周期最大，则第一个计数器的输出方波周期最大</li><li>输出方波周期最大，即输出频率最小，计数初值最大，而计数初值均采用BCD码，最大为0（即10000），因此第一个计数器的输出频率最小为200Hz</li><li>第二个计数器的输出频率最小为1/50Hz,即最大周期为50s</li></ul></li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机与接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统复习总结</title>
      <link href="/posts/adf8fb25.html"/>
      <url>/posts/adf8fb25.html</url>
      
        <content type="html"><![CDATA[<h2 id="信号与系统的基本概念"><a href="#信号与系统的基本概念" class="headerlink" title="信号与系统的基本概念"></a>信号与系统的基本概念</h2><details class="folding-tag" blue><summary> 详解 </summary>              <div class='content'>              <ol><li>线性系统判断<ul><li>x(t)与q(0)，y(t)分开,且为加减法</li><li>无常数项</li><li>x(t),y(t)前系数无要求</li><li>y(t),x(t)可以独自求导，积分，但不能进行平方，取对数，取倒数之类的复合运算</li></ul></li><li>时不变系统判断<ul><li>x(t),y(t)前系数为常数</li><li>t或k前系数必须为1</li><li>可以对x(t),y(t)进行积分，求导或复合运算</li><li>x(t)与q(0)，y(t)可以相乘</li><li>q(0),x(t)不能随时间变化</li></ul></li></ol>              </div>            </details><h2 id="连续时间信号与系统的时域分析"><a href="#连续时间信号与系统的时域分析" class="headerlink" title="连续时间信号与系统的时域分析"></a>连续时间信号与系统的时域分析</h2><details class="folding-tag" blue><summary> 详解 </summary>              <div class='content'>              <ul><li>冲激函数筛选性的推广：<script type="math/tex; mode=display">\int_{-\infty}^\infty δ^{(n)}(t)φ(t)dt=(-1)^{n}φ^{(n)}(0)</script></li></ul>              </div>            </details><h2 id="离散时间信号与系统的时域分析"><a href="#离散时间信号与系统的时域分析" class="headerlink" title="离散时间信号与系统的时域分析"></a>离散时间信号与系统的时域分析</h2><details class="folding-tag" blue><summary> 详解 </summary>              <div class='content'>              <ol><li>离散卷积定义式：<script type="math/tex; mode=display">y_{zs}(k)=x(k)﹡h(k)=\sum_{n=-\infty}^{\infty}x(n)h(k-n)</script></li><li>离散卷积不进位乘法：<br>末尾对齐，不进位，在0时刻下划线</li></ol>              </div>            </details><h2 id="连续信号与系统的频域分析"><a href="#连续信号与系统的频域分析" class="headerlink" title="连续信号与系统的频域分析"></a>连续信号与系统的频域分析</h2><details class="folding-tag" blue><summary> 详解 </summary>              <div class='content'>              <ol><li>周期信号的频谱图<ul><li>分幅度谱与相位谱</li><li>首先让周期信号f(t)中只有常数项与cos(nwt+φ),且只能为加减法</li><li><img src="https://s2.loli.net/2023/02/19/UrmD4At6FigyzIk.jpg" alt=""></li><li>由单边谱画双边谱，直流分量不变，双边幅度谱其余幅度减半，双边相位谱右边相位不变，左边相位取反</li><li>周期信号的频谱特点：离散性，谐波性，幅度收敛性</li></ul></li><li>函数的傅里叶变换对：<br><img src="https://s2.loli.net/2023/02/19/opT1kfj6UZwYQl9.jpg" alt=""></li><li>微分冲激法：<script type="math/tex; mode=display">F(w)=\frac{G(w)}{jw}+\pi[f(\infty)+f(-\infty)]\delta(w)</script><script type="math/tex; mode=display">当t趋近\infty,f(t)为常数时使用，其中G(w)为f^{,}(t)的频谱函数</script></li><li>信号带宽wm或fm:<ul><li>时域中两个信号相乘，所得信号的带宽为原来两个信号的带宽之和</li><li>时域中两个信号相加，所得信号的带宽应为原来两个信号中大的那个带宽</li><li>时域中两个信号卷积，所得信号的带宽为原来两个信号中小的那个带宽</li></ul></li><li>奈奎斯特取样率ws或fs,ws=2wm,fs=2fm</li></ol>              </div>            </details><h2 id="连续时间系统的复频域分析"><a href="#连续时间系统的复频域分析" class="headerlink" title="连续时间系统的复频域分析"></a>连续时间系统的复频域分析</h2><details class="folding-tag" blue><summary> 详解 </summary>              <div class='content'>              <ol><li>时移性：复频域乘 $e^{-s{t}_{0}}$</li><li>频移性：时域乘 $e^{t{s}_{0}}$</li><li>初值定理：有理真分式</li><li>用终值定理时,F(s)的极点(即分母部分的零点) 小于0，或等于0的只有单根，否则 $ f(\infty)不存在 $</li></ol>              </div>            </details><h2 id="离散信号与系统的变换域分析概述"><a href="#离散信号与系统的变换域分析概述" class="headerlink" title="离散信号与系统的变换域分析概述"></a>离散信号与系统的变换域分析概述</h2><details class="folding-tag" blue><summary> 详解 </summary>              <div class='content'>              <ol><li>单边Z变换公式<script type="math/tex; mode=display">F(z)=\sum_{k=0}^{\infty}f(k)z^{-k}</script>只对序列位于坐标轴右边的部分进行运算</li><li>左移序f(k+m)<br>Z变换后对于原F(z)少乘 $z^{-m}$,即需要对F(Z)多乘 $z^{m}$,同时减去移序后坐标轴左边的部分</li><li>右移序f(k-m)<br>需要对F(z)乘 $z^{-m}$,同时加上移序后多出的部分</li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号与系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab入门</title>
      <link href="/posts/4da13fe.html"/>
      <url>/posts/4da13fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>多行注释 Ctrl+R</li><li>取消注释 Ctrl+T</li></ol><h2 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h2><ol><li>clear(清除工作区所有变量)</li><li>clc(清除命令行所有文本)</li><li>clear;clc(初始化)</li></ol><h2 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h2><ul><li>.*&emsp;向量对应元素相乘</li><li>*&emsp;向量或矩阵相乘</li><li>‘&emsp;矩阵转置</li><li>.^&emsp;矩阵幂运算</li></ul><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="输入函数input"><a href="#输入函数input" class="headerlink" title="输入函数input"></a>输入函数input</h3><p>&emsp;&emsp;<strong>注：将输入的数、向量、矩阵、字符串等赋给一个变量</strong><br>&emsp;&emsp;示例：<br>   <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = input(<span class="string">&#x27;请输入A：&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="输出函数disp"><a href="#输出函数disp" class="headerlink" title="输出函数disp"></a>输出函数disp</h3><p>&emsp;&emsp;示例:<br>   <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;c的取值为&#x27;</span> num2str(c)])</span><br></pre></td></tr></table></figure></p><h3 id="求和函数sum"><a href="#求和函数sum" class="headerlink" title="求和函数sum"></a>求和函数sum</h3><p>&emsp;&emsp;<strong>注：向量直接求和，对于矩阵A</strong></p><ol><li>sum(A)或sum(A,1)<br>按列求和（得到一个行向量）</li><li>sum(A,2)<br>按行求和(得到一个列向量)</li><li>sum(A(:))或sum(sum(A))<br>对整个矩阵求和 </li></ol><h3 id="size函数"><a href="#size函数" class="headerlink" title="size函数"></a>size函数</h3>   <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>(A) <span class="comment">% size(A)函数是用来求矩阵A的大小的,它返回一个行向量，第一个元素是矩阵的行数，第二个元素是矩阵的列数</span></span><br><span class="line">[r,c] = <span class="built_in">size</span>(A) <span class="comment">% 将矩阵A的行数返回到第一个变量r，将矩阵的列数返回到第二个变量c</span></span><br></pre></td></tr></table></figure><h3 id="repmat函数"><a href="#repmat函数" class="headerlink" title="repmat函数"></a>repmat函数</h3>   <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B = <span class="built_in">repmat</span>(A,m,n) <span class="comment">% 将矩阵A复制m×n块，即把A作为B的元素，B由m×n个A平铺而成</span></span><br></pre></td></tr></table></figure><h3 id="find函数"><a href="#find函数" class="headerlink" title="find函数"></a>find函数</h3>   <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="built_in">find</span>(X) <span class="comment">% 返回向量X中不为0的元素的位置索引</span></span><br><span class="line">A = <span class="built_in">find</span>(X,<span class="number">2</span>) <span class="comment">% 返回向量前2个不为0的元素的位置</span></span><br><span class="line"><span class="comment">%% 在Matlab中，矩阵里的元素是一列一列存储</span></span><br><span class="line">[r,c] = <span class="built_in">find</span>(X) <span class="comment">% r与c都为列向量，且阶数相同，r代表行，c代表列</span></span><br><span class="line"><span class="comment">%%例如r=[1,2],c=[2,3],则代表矩阵X的1行2列，2行3列的元素不为零</span></span><br><span class="line">[r,c] = <span class="built_in">find</span>(X,<span class="number">1</span>) <span class="comment">%只找第一个非0元素</span></span><br></pre></td></tr></table></figure><h3 id="max函数"><a href="#max函数" class="headerlink" title="max函数"></a>max函数</h3><p>&emsp;&emsp;<strong>注：若A是向量，则返回A的最大值,对于矩阵A</strong></p><ol><li>M=max(A)<br>返回包含每一列最大值的行向量</li><li>M=max(A,[],2)<br>返回包含每一行最大值的列向量</li><li>M=max(A,[],’all’)<br>查找A的所有元素的最大值</li></ol><h3 id="zeros函数"><a href="#zeros函数" class="headerlink" title="zeros函数"></a>zeros函数</h3><ol><li>zeros(N)<br>生成一个NxN的零方阵</li><li>zeros(M,N)<br>生成一个MxN的零方阵</li></ol><h3 id="ones函数"><a href="#ones函数" class="headerlink" title="ones函数"></a>ones函数</h3><p>   &emsp;&emsp;与zeros函数用法相同，返回的是1</p><h3 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h3><ol><li>若A是行向量或列向量<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(A) <span class="comment">%sort(A)是默认的升序，而sort(A,&#x27;descend&#x27;)是降序排序</span></span><br></pre></td></tr></table></figure></li><li>若A是矩阵<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(A)=<span class="built_in">sort</span>(A,<span class="number">1</span>) <span class="comment">%对A的各列进行升序排列</span></span><br><span class="line"><span class="built_in">sort</span>(A,<span class="number">2</span>) <span class="comment">%对A中的各行元素升序排列</span></span><br><span class="line">[sA,index] = <span class="built_in">sort</span>(A,<span class="string">&#x27;descend&#x27;</span>) <span class="comment">%sA是排序好的向量，index是向量sA中对A的索引即sA中元素在A中原本的位置</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="plot函数"><a href="#plot函数" class="headerlink" title="plot函数"></a>plot函数</h3><pre><code><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x1,y1,x2,y2) </span><br><span class="line"><span class="comment">% 线方式： - 实线 :点线 -. 虚点线 - - 波折线 </span></span><br><span class="line"><span class="comment">% 点方式： . 圆点  +加号  * 星号  x x形  o 小圆</span></span><br><span class="line"><span class="comment">% 颜色： y黄； r红； g绿； b蓝； w白； k黑； m紫； c青</span></span><br><span class="line"><span class="comment">%%例如：plot(x1,y1,&#x27;r-&#x27;)</span></span><br></pre></td></tr></table></figure></code></pre><p>&emsp;&emsp; <strong>注：在同一个脚本文件里面，要想画多个图，需要给每个图编号</strong><br>&emsp;&emsp;&ensp;例如：<br>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x1,y1,<span class="string">&#x27;r-&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(x2,y2,<span class="string">&#x27;k-&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h3 id="mean函数"><a href="#mean函数" class="headerlink" title="mean函数"></a>mean函数</h3><p>&emsp;&emsp;作用：求均值</p><ul><li><p>mean(A)=mean(A,1)</p><ol><li>A为向量，返回元素均值</li><li>A为矩阵，返回包含每列均值的行向量</li></ol></li><li><p>mean(A,2)<br>返回每行均值的列向量</p></li></ul><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>&emsp;&emsp;function [输出变量] = 函数名称(输入变量）<br>&emsp;&emsp;函数的中间部分都是函数体<br>&emsp;&emsp;函数的最后要用end结尾<br>&emsp;&emsp;输出变量和输入变量可以有多个，用逗号隔开<br>&emsp;&emsp;例如：<br>   <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[a,b,c]</span>=<span class="title">test</span><span class="params">(d,e,f)</span></span></span><br><span class="line">    a=d+e;</span><br><span class="line">    b=e+f;</span><br><span class="line">    c=f+d;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><br>&emsp;&emsp;<strong>注：自定义的函数要单独放在一个m文件中，文件名为“函数名.m”，不可以直接放在主函数里面</strong></p><h2 id="提取矩阵中指定位置的元素"><a href="#提取矩阵中指定位置的元素" class="headerlink" title="提取矩阵中指定位置的元素"></a>提取矩阵中指定位置的元素</h2><ol><li>取指定行和列的一个元素（输出的是一个值）<br>A(m,n)<br>m行n列的元素</li><li>取指定的某一行的全部元素（输出的是一个行向量）<br>A(2,:)<br>矩阵A第二行组成的向量</li><li>取指定的某一列的全部元素（输出的是一个列向量）<br>A(:;2)<br>矩阵A第二列组成的向量</li><li>取指定的某些行的全部元素（输出的是一个矩阵）<br>A([2,5],:)<br> 只取第二行和第五行（一共2行）<br>A(2:5,:)<br> 取第二行到第五行（一共4行）<br>A(2:2:5,:)<br> 取第二行和第四行 （从2开始，每次递增2个单位，到5结束）<br>A(2:end,:)<br> 取第二行到最后一行<br>A(2:end-1,:)<br> 取第二行到倒数第二行</li><li>取全部元素(按列拼接的，最终输出的是一个列向量)<br>A(:)</li></ol><h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><ol><li>A的逆矩阵:inv(A)</li><li>“/“代表矩阵之间的除法(A/B=A*inv(B))</li><li>两个形状相同的矩阵对应元素之间的乘除法需要使用“.<em>”和“./”<br>A . </em> B</li><li>每个元素同时和常数相乘或相除操作都可以使用<br>A <em> 2=A .</em> 2</li><li>每个元素同时乘方时只能用 .^<br>A .^ 2<br>而A ^ 2 =A * A</li></ol><h2 id="求特征值和特征向量"><a href="#求特征值和特征向量" class="headerlink" title="求特征值和特征向量"></a>求特征值和特征向量</h2><ol><li>E=eig(A)<br>求矩阵A的全部特征值，构成向量E</li><li>[V,D]=eig(A)<br>求矩阵A的全部特征值，构成对角阵D，并求A的特征向量构成V的列向量。（V的每一列都是D中与之相同列的特征值的特征向量）</li></ol><h2 id="矩阵与常数的大小判断运算"><a href="#矩阵与常数的大小判断运算" class="headerlink" title="矩阵与常数的大小判断运算"></a>矩阵与常数的大小判断运算</h2><p> &emsp;&emsp;共有三种运算符：大于&gt; ;小于&lt; ;等于 == （一个等号表示赋值；两个等号表示判断）<br> &emsp;&emsp;例如：<br> &emsp;&emsp;X = [1 -3 0;0 0 8;4 0 6]<br> &emsp;&emsp;X与常数进行判断时，结果的阶数不变，但只有0和1两种元素，0代表不满足，1代表满足</p>]]></content>
      
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/posts/3c50d03d.html"/>
      <url>/posts/3c50d03d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown语法自带格式"><a href="#Markdown语法自带格式" class="headerlink" title="Markdown语法自带格式"></a>Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p> Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>….</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表-跟空格都可以"><a href="#列表-跟空格都可以" class="headerlink" title="列表(*,+,-跟空格都可以)"></a>列表(*,+,-跟空格都可以)</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/404.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://s2.loli.net/2023/01/10/14RtGdEKsBLZ57m.jpg</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/img/404.jpg" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://s2.loli.net/2023/01/10/14RtGdEKsBLZ57m.jpg" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="外挂标签"><a href="#外挂标签" class="headerlink" title="外挂标签"></a>外挂标签</h1><h2 id="PDF插件"><a href="#PDF插件" class="headerlink" title="PDF插件"></a>PDF插件</h2><ol><li>安装hexo-pdf插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-pdf --save</span><br></pre></td></tr></table></figure></li><li>外挂标签的引用格式如下：<div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>文件路径: 可以是相对路径或者是在线链接</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件，我是在source文件夹内建立pdf文件夹，在里面放pdf文件<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf /pdf/第五章.pdf %&#125;</span><br></pre></td></tr></table></figure></li><li>在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
